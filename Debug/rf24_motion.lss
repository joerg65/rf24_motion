
rf24_motion.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .text         00000e44  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bootloader   0000009a  00000e44  00000e44  00000f44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000032  00800060  00000ede  00000fde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000004b  00800092  00800092  00001010  2**0
                  ALLOC
  4 .stab         00003834  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000034e7  00000000  00000000  00004844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00007d2b  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007d3c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	3f c0       	rjmp	.+126    	; 0x80 <__ctors_end>
   2:	59 c0       	rjmp	.+178    	; 0xb6 <__bad_interrupt>
   4:	ba c2       	rjmp	.+1396   	; 0x57a <__vector_2>
   6:	57 c0       	rjmp	.+174    	; 0xb6 <__bad_interrupt>
   8:	cd c2       	rjmp	.+1434   	; 0x5a4 <__vector_4>
   a:	55 c0       	rjmp	.+170    	; 0xb6 <__bad_interrupt>
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	53 c0       	rjmp	.+166    	; 0xb6 <__bad_interrupt>
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	32 c6       	rjmp	.+3172   	; 0xc78 <__vector_9>
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	4f c0       	rjmp	.+158    	; 0xb6 <__bad_interrupt>
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	4d c0       	rjmp	.+154    	; 0xb6 <__bad_interrupt>
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	4b c0       	rjmp	.+150    	; 0xb6 <__bad_interrupt>
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>

00000022 <__trampolines_end>:
	...

00000040 <config>:
  40:	00 00 6e 5a 32 53 62 4b 71 44 4e 4d 37 62 65 00     ..nZ2SbKqDNM7be.
  50:	ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf e5       	ldi	r28, 0x5F	; 95
  86:	d2 e0       	ldi	r29, 0x02	; 2
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	ee ed       	ldi	r30, 0xDE	; 222
  94:	fe e0       	ldi	r31, 0x0E	; 14
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a2 39       	cpi	r26, 0x92	; 146
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	a2 e9       	ldi	r26, 0x92	; 146
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	ad 3d       	cpi	r26, 0xDD	; 221
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	64 d3       	rcall	.+1736   	; 0x77c <main>
  b4:	c5 c6       	rjmp	.+3466   	; 0xe40 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <aes256_enc>:
P = 0
xREDUCER = 25

.global aes256_enc
aes256_enc:
	ldi r20, 14
  b8:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <aes_encrypt_core>

000000bc <aes192_enc>:

.global aes192_enc
aes192_enc:
	ldi r20, 12
  bc:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core
  be:	01 c0       	rjmp	.+2      	; 0xc2 <aes_encrypt_core>

000000c0 <aes128_enc>:

.global aes128_enc
aes128_enc:
	ldi r20, 10
  c0:	4a e0       	ldi	r20, 0x0A	; 10

000000c2 <aes_encrypt_core>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_encrypt_core
aes_encrypt_core:
	push_range 2, 17
  c2:	2f 92       	push	r2
  c4:	3f 92       	push	r3
  c6:	4f 92       	push	r4
  c8:	5f 92       	push	r5
  ca:	6f 92       	push	r6
  cc:	7f 92       	push	r7
  ce:	8f 92       	push	r8
  d0:	9f 92       	push	r9
  d2:	af 92       	push	r10
  d4:	bf 92       	push	r11
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
	push r28
  e2:	cf 93       	push	r28
	push r29
  e4:	df 93       	push	r29
	push r24
  e6:	8f 93       	push	r24
	push r25
  e8:	9f 93       	push	r25
	movw r26, r22
  ea:	db 01       	movw	r26, r22
	movw r30, r24
  ec:	fc 01       	movw	r30, r24
	mov  CTR, r20
  ee:	84 2f       	mov	r24, r20
	clt
  f0:	e8 94       	clt
	
	.irp param,ST00, ST01, ST02, ST03, ST10, ST11, ST12, ST13, ST20, ST21, ST22, ST23, ST30, ST31, ST32, ST33
		ld \param, Z+
	.endr
  f2:	81 90       	ld	r8, Z+
  f4:	91 90       	ld	r9, Z+
  f6:	a1 90       	ld	r10, Z+
  f8:	b1 90       	ld	r11, Z+
  fa:	c1 90       	ld	r12, Z+
  fc:	d1 90       	ld	r13, Z+
  fe:	e1 90       	ld	r14, Z+
 100:	f1 90       	ld	r15, Z+
 102:	01 91       	ld	r16, Z+
 104:	11 91       	ld	r17, Z+
 106:	21 91       	ld	r18, Z+
 108:	31 91       	ld	r19, Z+
 10a:	41 91       	ld	r20, Z+
 10c:	51 91       	ld	r21, Z+
 10e:	61 91       	ld	r22, Z+
 110:	71 91       	ld	r23, Z+
	
	ldi xREDUCER, 0x1b /* load reducer */
 112:	9b e1       	ldi	r25, 0x1B	; 27
	ldi r31, hi8(aes_sbox)
 114:	f4 e0       	ldi	r31, 0x04	; 4
	/* key whitening */
1:
	.irp param,ST00, ST01, ST02, ST03, ST10, ST11, ST12, ST13, ST20, ST21, ST22, ST23, ST30, ST31, ST32, ST33
		ld r0, X+
		eor \param, r0
	.endr
 116:	0d 90       	ld	r0, X+
 118:	80 24       	eor	r8, r0
 11a:	0d 90       	ld	r0, X+
 11c:	90 24       	eor	r9, r0
 11e:	0d 90       	ld	r0, X+
 120:	a0 24       	eor	r10, r0
 122:	0d 90       	ld	r0, X+
 124:	b0 24       	eor	r11, r0
 126:	0d 90       	ld	r0, X+
 128:	c0 24       	eor	r12, r0
 12a:	0d 90       	ld	r0, X+
 12c:	d0 24       	eor	r13, r0
 12e:	0d 90       	ld	r0, X+
 130:	e0 24       	eor	r14, r0
 132:	0d 90       	ld	r0, X+
 134:	f0 24       	eor	r15, r0
 136:	0d 90       	ld	r0, X+
 138:	00 25       	eor	r16, r0
 13a:	0d 90       	ld	r0, X+
 13c:	10 25       	eor	r17, r0
 13e:	0d 90       	ld	r0, X+
 140:	20 25       	eor	r18, r0
 142:	0d 90       	ld	r0, X+
 144:	30 25       	eor	r19, r0
 146:	0d 90       	ld	r0, X+
 148:	40 25       	eor	r20, r0
 14a:	0d 90       	ld	r0, X+
 14c:	50 25       	eor	r21, r0
 14e:	0d 90       	ld	r0, X+
 150:	60 25       	eor	r22, r0
 152:	0d 90       	ld	r0, X+
 154:	70 25       	eor	r23, r0
	
	brtc 2f
 156:	2e f5       	brtc	.+74     	; 0x1a2 <exit+0x4a>

00000158 <exit>:
exit:	
	pop r31
 158:	ff 91       	pop	r31
	pop r30
 15a:	ef 91       	pop	r30
	st Z+, ST00
 15c:	81 92       	st	Z+, r8
	st Z+, ST01
 15e:	91 92       	st	Z+, r9
	st Z+, ST02
 160:	a1 92       	st	Z+, r10
	st Z+, ST03
 162:	b1 92       	st	Z+, r11
	st Z+, ST10
 164:	c1 92       	st	Z+, r12
	st Z+, ST11
 166:	d1 92       	st	Z+, r13
	st Z+, ST12
 168:	e1 92       	st	Z+, r14
	st Z+, ST13
 16a:	f1 92       	st	Z+, r15
	st Z+, ST20
 16c:	01 93       	st	Z+, r16
	st Z+, ST21
 16e:	11 93       	st	Z+, r17
	st Z+, ST22
 170:	21 93       	st	Z+, r18
	st Z+, ST23
 172:	31 93       	st	Z+, r19
	st Z+, ST30
 174:	41 93       	st	Z+, r20
	st Z+, ST31
 176:	51 93       	st	Z+, r21
	st Z+, ST32
 178:	61 93       	st	Z+, r22
	st Z+, ST33
 17a:	71 93       	st	Z+, r23
	pop r29
 17c:	df 91       	pop	r29
	pop r28
 17e:	cf 91       	pop	r28
	pop_range 2, 17
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	bf 90       	pop	r11
 18e:	af 90       	pop	r10
 190:	9f 90       	pop	r9
 192:	8f 90       	pop	r8
 194:	7f 90       	pop	r7
 196:	6f 90       	pop	r6
 198:	5f 90       	pop	r5
 19a:	4f 90       	pop	r4
 19c:	3f 90       	pop	r3
 19e:	2f 90       	pop	r2
	ret
 1a0:	08 95       	ret

2:	dec CTR
 1a2:	8a 95       	dec	r24
	brne 3f
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <exit+0x50>
	set
 1a6:	68 94       	set
3:

	/* encryption loop */ 

	/* SBOX substitution and shifting */
	mov r30, ST00
 1a8:	e8 2d       	mov	r30, r8
	lpm ST00, Z
 1aa:	84 90       	lpm	r8, Z
	mov r30, ST10
 1ac:	ec 2d       	mov	r30, r12
	lpm ST10, Z
 1ae:	c4 90       	lpm	r12, Z
	mov r30, ST20
 1b0:	e0 2f       	mov	r30, r16
	lpm ST20, Z
 1b2:	04 91       	lpm	r16, Z
	mov r30, ST30
 1b4:	e4 2f       	mov	r30, r20
	lpm ST30, Z
 1b6:	44 91       	lpm	r20, Z

	mov r30, ST01
 1b8:	e9 2d       	mov	r30, r9
	lpm T0, Z
 1ba:	24 90       	lpm	r2, Z
	mov r30, ST11
 1bc:	ed 2d       	mov	r30, r13
	lpm ST01, Z
 1be:	94 90       	lpm	r9, Z
	mov r30, ST21
 1c0:	e1 2f       	mov	r30, r17
	lpm ST11, Z
 1c2:	d4 90       	lpm	r13, Z
	mov r30, ST31
 1c4:	e5 2f       	mov	r30, r21
	lpm ST21, Z
 1c6:	14 91       	lpm	r17, Z
	mov ST31, T0
 1c8:	52 2d       	mov	r21, r2

	mov r30, ST02
 1ca:	ea 2d       	mov	r30, r10
	lpm T0, Z
 1cc:	24 90       	lpm	r2, Z
	mov r30, ST12
 1ce:	ee 2d       	mov	r30, r14
	lpm T1, Z
 1d0:	34 90       	lpm	r3, Z
	mov r30, ST22
 1d2:	e2 2f       	mov	r30, r18
	lpm ST02, Z
 1d4:	a4 90       	lpm	r10, Z
	mov r30, ST32
 1d6:	e6 2f       	mov	r30, r22
	lpm ST12, Z
 1d8:	e4 90       	lpm	r14, Z
	mov ST22, T0
 1da:	22 2d       	mov	r18, r2
	mov ST32, T1
 1dc:	63 2d       	mov	r22, r3

	mov r30, ST03
 1de:	eb 2d       	mov	r30, r11
	lpm T0, Z
 1e0:	24 90       	lpm	r2, Z
	mov r30, ST33
 1e2:	e7 2f       	mov	r30, r23
	lpm ST03, Z
 1e4:	b4 90       	lpm	r11, Z
	mov r30, ST23
 1e6:	e3 2f       	mov	r30, r19
	lpm ST33, Z
 1e8:	74 91       	lpm	r23, Z
	mov r30, ST13
 1ea:	ef 2d       	mov	r30, r15
	lpm ST23, Z
 1ec:	34 91       	lpm	r19, Z
	mov ST13, T0
 1ee:	f2 2c       	mov	r15, r2
		
	/* mixcols (or rows in our case) */
	brtc 2f
 1f0:	0e f4       	brtc	.+2      	; 0x1f4 <exit+0x9c>
	rjmp 1b
 1f2:	91 cf       	rjmp	.-222    	; 0x116 <aes_encrypt_core+0x54>
2:	
 /* mixrow 1 */
	mov r0, ST02
 1f4:	0a 2c       	mov	r0, r10
	eor r0, ST03
 1f6:	0b 24       	eor	r0, r11
	mov T2, r0
 1f8:	40 2c       	mov	r4, r0
		
	mov T0, ST00
 1fa:	28 2c       	mov	r2, r8
	eor ST00, ST01
 1fc:	89 24       	eor	r8, r9
	eor r0, ST00
 1fe:	08 24       	eor	r0, r8
	lsl ST00
 200:	88 0c       	add	r8, r8
	brcc 3f
 202:	08 f4       	brcc	.+2      	; 0x206 <exit+0xae>
	eor ST00, xREDUCER
 204:	89 26       	eor	r8, r25
3:	eor ST00, r0
 206:	80 24       	eor	r8, r0
	eor ST00, T0
 208:	82 24       	eor	r8, r2
	
	mov T1, ST01
 20a:	39 2c       	mov	r3, r9
	eor T1, ST02
 20c:	3a 24       	eor	r3, r10
	lsl T1
 20e:	33 0c       	add	r3, r3
	brcc 3f
 210:	08 f4       	brcc	.+2      	; 0x214 <exit+0xbc>
	eor T1, xREDUCER
 212:	39 26       	eor	r3, r25
3:	eor T1, r0
 214:	30 24       	eor	r3, r0
	eor ST01, T1
 216:	93 24       	eor	r9, r3
	
	lsl T2
 218:	44 0c       	add	r4, r4
	brcc 3f
 21a:	08 f4       	brcc	.+2      	; 0x21e <exit+0xc6>
	eor T2, xREDUCER
 21c:	49 26       	eor	r4, r25
3:  eor T2, r0
 21e:	40 24       	eor	r4, r0
	eor ST02, T2
 220:	a4 24       	eor	r10, r4
	
	eor T0, ST03
 222:	2b 24       	eor	r2, r11
	lsl T0
 224:	22 0c       	add	r2, r2
	brcc 3f
 226:	08 f4       	brcc	.+2      	; 0x22a <exit+0xd2>
	eor T0, xREDUCER
 228:	29 26       	eor	r2, r25
3:	eor T0, r0
 22a:	20 24       	eor	r2, r0
	eor ST03, T0
 22c:	b2 24       	eor	r11, r2
		
 /* mixrow 2 */
	mov r0, ST12
 22e:	0e 2c       	mov	r0, r14
	eor r0, ST13
 230:	0f 24       	eor	r0, r15
	mov T2, r0
 232:	40 2c       	mov	r4, r0
		
	mov T0, ST10
 234:	2c 2c       	mov	r2, r12
	eor ST10, ST11
 236:	cd 24       	eor	r12, r13
	eor r0, ST10
 238:	0c 24       	eor	r0, r12
	lsl ST10
 23a:	cc 0c       	add	r12, r12
	brcc 3f
 23c:	08 f4       	brcc	.+2      	; 0x240 <exit+0xe8>
	eor ST10, xREDUCER
 23e:	c9 26       	eor	r12, r25
3:	eor ST10, r0
 240:	c0 24       	eor	r12, r0
	eor ST10, T0
 242:	c2 24       	eor	r12, r2
	
	mov T1, ST11
 244:	3d 2c       	mov	r3, r13
	eor T1, ST12
 246:	3e 24       	eor	r3, r14
	lsl T1
 248:	33 0c       	add	r3, r3
	brcc 3f
 24a:	08 f4       	brcc	.+2      	; 0x24e <exit+0xf6>
	eor T1, xREDUCER
 24c:	39 26       	eor	r3, r25
3:	eor T1, r0
 24e:	30 24       	eor	r3, r0
	eor ST11, T1
 250:	d3 24       	eor	r13, r3
	
	lsl T2
 252:	44 0c       	add	r4, r4
	brcc 3f
 254:	08 f4       	brcc	.+2      	; 0x258 <exit+0x100>
	eor T2, xREDUCER
 256:	49 26       	eor	r4, r25
3:  eor T2, r0
 258:	40 24       	eor	r4, r0
	eor ST12, T2
 25a:	e4 24       	eor	r14, r4
	
	eor T0, ST13
 25c:	2f 24       	eor	r2, r15
	lsl T0
 25e:	22 0c       	add	r2, r2
	brcc 3f
 260:	08 f4       	brcc	.+2      	; 0x264 <__stack+0x5>
	eor T0, xREDUCER
 262:	29 26       	eor	r2, r25
3:	eor T0, r0
 264:	20 24       	eor	r2, r0
	eor ST13, T0
 266:	f2 24       	eor	r15, r2
		
 /* mixrow 3 */
	mov r0, ST22
 268:	02 2e       	mov	r0, r18
	eor r0, ST23
 26a:	03 26       	eor	r0, r19
	mov T2, r0
 26c:	40 2c       	mov	r4, r0
		
	mov T0, ST20
 26e:	20 2e       	mov	r2, r16
	eor ST20, ST21
 270:	01 27       	eor	r16, r17
	eor r0, ST20
 272:	00 26       	eor	r0, r16
	lsl ST20
 274:	00 0f       	add	r16, r16
	brcc 3f
 276:	08 f4       	brcc	.+2      	; 0x27a <__stack+0x1b>
	eor ST20, xREDUCER
 278:	09 27       	eor	r16, r25
3:	eor ST20, r0
 27a:	00 25       	eor	r16, r0
	eor ST20, T0
 27c:	02 25       	eor	r16, r2
	
	mov T1, ST21
 27e:	31 2e       	mov	r3, r17
	eor T1, ST22
 280:	32 26       	eor	r3, r18
	lsl T1
 282:	33 0c       	add	r3, r3
	brcc 3f
 284:	08 f4       	brcc	.+2      	; 0x288 <__stack+0x29>
	eor T1, xREDUCER
 286:	39 26       	eor	r3, r25
3:	eor T1, r0
 288:	30 24       	eor	r3, r0
	eor ST21, T1
 28a:	13 25       	eor	r17, r3
	
	lsl T2
 28c:	44 0c       	add	r4, r4
	brcc 3f
 28e:	08 f4       	brcc	.+2      	; 0x292 <__stack+0x33>
	eor T2, xREDUCER
 290:	49 26       	eor	r4, r25
3:  eor T2, r0
 292:	40 24       	eor	r4, r0
	eor ST22, T2
 294:	24 25       	eor	r18, r4
	
	eor T0, ST23
 296:	23 26       	eor	r2, r19
	lsl T0
 298:	22 0c       	add	r2, r2
	brcc 3f
 29a:	08 f4       	brcc	.+2      	; 0x29e <__stack+0x3f>
	eor T0, xREDUCER
 29c:	29 26       	eor	r2, r25
3:	eor T0, r0
 29e:	20 24       	eor	r2, r0
	eor ST23, T0
 2a0:	32 25       	eor	r19, r2
		
 /* mixrow 4 */
	mov r0, ST32
 2a2:	06 2e       	mov	r0, r22
	eor r0, ST33
 2a4:	07 26       	eor	r0, r23
	mov T2, r0
 2a6:	40 2c       	mov	r4, r0
		
	mov T0, ST30
 2a8:	24 2e       	mov	r2, r20
	eor ST30, ST31
 2aa:	45 27       	eor	r20, r21
	eor r0, ST30
 2ac:	04 26       	eor	r0, r20
	lsl ST30
 2ae:	44 0f       	add	r20, r20
	brcc 3f
 2b0:	08 f4       	brcc	.+2      	; 0x2b4 <__stack+0x55>
	eor ST30, xREDUCER
 2b2:	49 27       	eor	r20, r25
3:	eor ST30, r0
 2b4:	40 25       	eor	r20, r0
	eor ST30, T0
 2b6:	42 25       	eor	r20, r2
	
	mov T1, ST31
 2b8:	35 2e       	mov	r3, r21
	eor T1, ST32
 2ba:	36 26       	eor	r3, r22
	lsl T1
 2bc:	33 0c       	add	r3, r3
	brcc 3f
 2be:	08 f4       	brcc	.+2      	; 0x2c2 <__stack+0x63>
	eor T1, xREDUCER
 2c0:	39 26       	eor	r3, r25
3:	eor T1, r0
 2c2:	30 24       	eor	r3, r0
	eor ST31, T1
 2c4:	53 25       	eor	r21, r3
	
	lsl T2
 2c6:	44 0c       	add	r4, r4
	brcc 3f
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <__stack+0x6d>
	eor T2, xREDUCER
 2ca:	49 26       	eor	r4, r25
3:  eor T2, r0
 2cc:	40 24       	eor	r4, r0
	eor ST32, T2
 2ce:	64 25       	eor	r22, r4
	
	eor T0, ST33
 2d0:	27 26       	eor	r2, r23
	lsl T0
 2d2:	22 0c       	add	r2, r2
	brcc 3f
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <__stack+0x79>
	eor T0, xREDUCER
 2d6:	29 26       	eor	r2, r25
3:	eor T0, r0
 2d8:	20 24       	eor	r2, r0
	eor ST33, T0
 2da:	72 25       	eor	r23, r2
	/* mix colums (rows) done */

	/* add key*/
	rjmp 1b
 2dc:	1c cf       	rjmp	.-456    	; 0x116 <aes_encrypt_core+0x54>

000002de <aes256_init>:
 2de:	ab 01       	movw	r20, r22
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <aes_init>

000002e6 <aes192_init>:
 2e6:	ab 01       	movw	r20, r22
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	60 ec       	ldi	r22, 0xC0	; 192
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <aes_init>

000002ee <aes128_init>:
 2ee:	ab 01       	movw	r20, r22
 2f0:	77 27       	eor	r23, r23
 2f2:	60 e8       	ldi	r22, 0x80	; 128

000002f4 <aes_init>:
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	fa 01       	movw	r30, r20
 302:	ea 01       	movw	r28, r20
 304:	dc 01       	movw	r26, r24
 306:	76 95       	lsr	r23
 308:	67 95       	ror	r22
 30a:	66 95       	lsr	r22
 30c:	66 95       	lsr	r22
 30e:	26 2f       	mov	r18, r22
 310:	0d 90       	ld	r0, X+
 312:	01 92       	st	Z+, r0
 314:	2a 95       	dec	r18
 316:	e1 f7       	brne	.-8      	; 0x310 <aes_init+0x1c>
 318:	66 95       	lsr	r22
 31a:	66 95       	lsr	r22
 31c:	63 fb       	bst	r22, 3
 31e:	36 2f       	mov	r19, r22
 320:	76 2f       	mov	r23, r22
 322:	79 5f       	subi	r23, 0xF9	; 249
 324:	77 0f       	add	r23, r23
 326:	77 0f       	add	r23, r23
 328:	df 01       	movw	r26, r30
 32a:	14 97       	sbiw	r26, 0x04	; 4
 32c:	26 2f       	mov	r18, r22
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f4 e0       	ldi	r31, 0x04	; 4
 332:	7f 01       	movw	r14, r30
 334:	11 e0       	ldi	r17, 0x01	; 1
 336:	4d 91       	ld	r20, X+
 338:	5d 91       	ld	r21, X+
 33a:	8d 91       	ld	r24, X+
 33c:	9d 91       	ld	r25, X+
 33e:	32 17       	cp	r19, r18
 340:	b1 f0       	breq	.+44     	; 0x36e <aes_init+0x7a>
 342:	5e f5       	brtc	.+86     	; 0x39a <aes_init+0xa6>
 344:	02 2f       	mov	r16, r18
 346:	07 70       	andi	r16, 0x07	; 7
 348:	04 30       	cpi	r16, 0x04	; 4
 34a:	39 f5       	brne	.+78     	; 0x39a <aes_init+0xa6>
 34c:	f7 01       	movw	r30, r14
 34e:	e4 0f       	add	r30, r20
 350:	f1 1d       	adc	r31, r1
 352:	44 91       	lpm	r20, Z
 354:	f7 01       	movw	r30, r14
 356:	e5 0f       	add	r30, r21
 358:	f1 1d       	adc	r31, r1
 35a:	54 91       	lpm	r21, Z
 35c:	f7 01       	movw	r30, r14
 35e:	e8 0f       	add	r30, r24
 360:	f1 1d       	adc	r31, r1
 362:	84 91       	lpm	r24, Z
 364:	f7 01       	movw	r30, r14
 366:	e9 0f       	add	r30, r25
 368:	f1 1d       	adc	r31, r1
 36a:	94 91       	lpm	r25, Z
 36c:	16 c0       	rjmp	.+44     	; 0x39a <aes_init+0xa6>
 36e:	36 0f       	add	r19, r22
 370:	f7 01       	movw	r30, r14
 372:	e4 0f       	add	r30, r20
 374:	f1 1d       	adc	r31, r1
 376:	04 91       	lpm	r16, Z
 378:	f7 01       	movw	r30, r14
 37a:	e5 0f       	add	r30, r21
 37c:	f1 1d       	adc	r31, r1
 37e:	44 91       	lpm	r20, Z
 380:	f7 01       	movw	r30, r14
 382:	e8 0f       	add	r30, r24
 384:	f1 1d       	adc	r31, r1
 386:	54 91       	lpm	r21, Z
 388:	f7 01       	movw	r30, r14
 38a:	e9 0f       	add	r30, r25
 38c:	f1 1d       	adc	r31, r1
 38e:	84 91       	lpm	r24, Z
 390:	90 2f       	mov	r25, r16
 392:	41 27       	eor	r20, r17
 394:	11 0f       	add	r17, r17
 396:	08 f4       	brcc	.+2      	; 0x39a <aes_init+0xa6>
 398:	1b e1       	ldi	r17, 0x1B	; 27
 39a:	fd 01       	movw	r30, r26
 39c:	09 90       	ld	r0, Y+
 39e:	04 26       	eor	r0, r20
 3a0:	01 92       	st	Z+, r0
 3a2:	09 90       	ld	r0, Y+
 3a4:	05 26       	eor	r0, r21
 3a6:	01 92       	st	Z+, r0
 3a8:	09 90       	ld	r0, Y+
 3aa:	08 26       	eor	r0, r24
 3ac:	01 92       	st	Z+, r0
 3ae:	09 90       	ld	r0, Y+
 3b0:	09 26       	eor	r0, r25
 3b2:	01 92       	st	Z+, r0
 3b4:	23 95       	inc	r18
 3b6:	27 17       	cp	r18, r23
 3b8:	09 f0       	breq	.+2      	; 0x3bc <aes_init+0xc8>
 3ba:	bd cf       	rjmp	.-134    	; 0x336 <aes_init+0x42>
 3bc:	e8 94       	clt
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	08 95       	ret
	...

00000400 <aes_sbox>:
 400:	63 7c       	andi	r22, 0xC3	; 195
 402:	77 7b       	andi	r23, 0xB7	; 183
 404:	f2 6b       	ori	r31, 0xB2	; 178
 406:	6f c5       	rjmp	.+2782   	; 0xee6 <__data_load_start+0x8>
 408:	30 01       	movw	r6, r0
 40a:	67 2b       	or	r22, r23
 40c:	fe d7       	rcall	.+4092   	; 0x140a <__data_load_end+0x4fa>
 40e:	ab 76       	andi	r26, 0x6B	; 107
 410:	ca 82       	std	Y+2, r12	; 0x02
 412:	c9 7d       	andi	r28, 0xD9	; 217
 414:	fa 59       	subi	r31, 0x9A	; 154
 416:	47 f0       	brie	.+16     	; 0x428 <aes_sbox+0x28>
 418:	ad d4       	rcall	.+2394   	; 0xd74 <__udivmodhi4+0x2>
 41a:	a2 af       	std	Z+58, r26	; 0x3a
 41c:	9c a4       	ldd	r9, Y+44	; 0x2c
 41e:	72 c0       	rjmp	.+228    	; 0x504 <aes128_enc_single+0x4>
 420:	b7 fd       	sbrc	r27, 7
 422:	93 26       	eor	r9, r19
 424:	36 3f       	cpi	r19, 0xF6	; 246
 426:	f7 cc       	rjmp	.-1554   	; 0xfffffe16 <__eeprom_end+0xff7efe16>
 428:	34 a5       	ldd	r19, Z+44	; 0x2c
 42a:	e5 f1       	brhs	.+120    	; 0x4a4 <aes_sbox+0xa4>
 42c:	71 d8       	rcall	.-3870   	; 0xfffff510 <__eeprom_end+0xff7ef510>
 42e:	31 15       	cp	r19, r1
 430:	04 c7       	rjmp	.+3592   	; 0x123a <__data_load_end+0x32a>
 432:	23 c3       	rjmp	.+1606   	; 0xa7a <mirf_config_register+0x22>
 434:	18 96       	adiw	r26, 0x08	; 8
 436:	05 9a       	sbi	0x00, 5	; 0
 438:	07 12       	cpse	r0, r23
 43a:	80 e2       	ldi	r24, 0x20	; 32
 43c:	eb 27       	eor	r30, r27
 43e:	b2 75       	andi	r27, 0x52	; 82
 440:	09 83       	std	Y+1, r16	; 0x01
 442:	2c 1a       	sub	r2, r28
 444:	1b 6e       	ori	r17, 0xEB	; 235
 446:	5a a0       	ldd	r5, Y+34	; 0x22
 448:	52 3b       	cpi	r21, 0xB2	; 178
 44a:	d6 b3       	in	r29, 0x16	; 22
 44c:	29 e3       	ldi	r18, 0x39	; 57
 44e:	2f 84       	ldd	r2, Y+15	; 0x0f
 450:	53 d1       	rcall	.+678    	; 0x6f8 <setup+0x2>
 452:	00 ed       	ldi	r16, 0xD0	; 208
 454:	20 fc       	sbrc	r2, 0
 456:	b1 5b       	subi	r27, 0xB1	; 177
 458:	6a cb       	rjmp	.-2348   	; 0xfffffb2e <__eeprom_end+0xff7efb2e>
 45a:	be 39       	cpi	r27, 0x9E	; 158
 45c:	4a 4c       	sbci	r20, 0xCA	; 202
 45e:	58 cf       	rjmp	.-336    	; 0x310 <aes_init+0x1c>
 460:	d0 ef       	ldi	r29, 0xF0	; 240
 462:	aa fb       	.word	0xfbaa	; ????
 464:	43 4d       	sbci	r20, 0xD3	; 211
 466:	33 85       	ldd	r19, Z+11	; 0x0b
 468:	45 f9       	bld	r20, 5
 46a:	02 7f       	andi	r16, 0xF2	; 242
 46c:	50 3c       	cpi	r21, 0xC0	; 192
 46e:	9f a8       	ldd	r9, Y+55	; 0x37
 470:	51 a3       	std	Z+33, r21	; 0x21
 472:	40 8f       	std	Z+24, r20	; 0x18
 474:	92 9d       	mul	r25, r2
 476:	38 f5       	brcc	.+78     	; 0x4c6 <aes_sbox+0xc6>
 478:	bc b6       	in	r11, 0x3c	; 60
 47a:	da 21       	and	r29, r10
 47c:	10 ff       	sbrs	r17, 0
 47e:	f3 d2       	rcall	.+1510   	; 0xa66 <mirf_config_register+0xe>
 480:	cd 0c       	add	r12, r13
 482:	13 ec       	ldi	r17, 0xC3	; 195
 484:	5f 97       	sbiw	r26, 0x1f	; 31
 486:	44 17       	cp	r20, r20
 488:	c4 a7       	std	Z+44, r28	; 0x2c
 48a:	7e 3d       	cpi	r23, 0xDE	; 222
 48c:	64 5d       	subi	r22, 0xD4	; 212
 48e:	19 73       	andi	r17, 0x39	; 57
 490:	60 81       	ld	r22, Z
 492:	4f dc       	rcall	.-1890   	; 0xfffffd32 <__eeprom_end+0xff7efd32>
 494:	22 2a       	or	r2, r18
 496:	90 88       	ldd	r9, Z+16	; 0x10
 498:	46 ee       	ldi	r20, 0xE6	; 230
 49a:	b8 14       	cp	r11, r8
 49c:	de 5e       	subi	r29, 0xEE	; 238
 49e:	0b db       	rcall	.-2538   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 4a0:	e0 32       	cpi	r30, 0x20	; 32
 4a2:	3a 0a       	sbc	r3, r26
 4a4:	49 06       	cpc	r4, r25
 4a6:	24 5c       	subi	r18, 0xC4	; 196
 4a8:	c2 d3       	rcall	.+1924   	; 0xc2e <spi_write_data+0x32>
 4aa:	ac 62       	ori	r26, 0x2C	; 44
 4ac:	91 95       	neg	r25
 4ae:	e4 79       	andi	r30, 0x94	; 148
 4b0:	e7 c8       	rjmp	.-3634   	; 0xfffff680 <__eeprom_end+0xff7ef680>
 4b2:	37 6d       	ori	r19, 0xD7	; 215
 4b4:	8d d5       	rcall	.+2842   	; 0xfd0 <__data_load_end+0xc0>
 4b6:	4e a9       	ldd	r20, Y+54	; 0x36
 4b8:	6c 56       	subi	r22, 0x6C	; 108
 4ba:	f4 ea       	ldi	r31, 0xA4	; 164
 4bc:	65 7a       	andi	r22, 0xA5	; 165
 4be:	ae 08       	sbc	r10, r14
 4c0:	ba 78       	andi	r27, 0x8A	; 138
 4c2:	25 2e       	mov	r2, r21
 4c4:	1c a6       	std	Y+44, r1	; 0x2c
 4c6:	b4 c6       	rjmp	.+3432   	; 0x1230 <__data_load_end+0x320>
 4c8:	e8 dd       	rcall	.-1072   	; 0x9a <__do_copy_data+0xe>
 4ca:	74 1f       	adc	r23, r20
 4cc:	4b bd       	out	0x2b, r20	; 43
 4ce:	8b 8a       	std	Y+19, r8	; 0x13
 4d0:	70 3e       	cpi	r23, 0xE0	; 224
 4d2:	b5 66       	ori	r27, 0x65	; 101
 4d4:	48 03       	fmul	r20, r16
 4d6:	f6 0e       	add	r15, r22
 4d8:	61 35       	cpi	r22, 0x51	; 81
 4da:	57 b9       	out	0x07, r21	; 7
 4dc:	86 c1       	rjmp	.+780    	; 0x7ea <main+0x6e>
 4de:	1d 9e       	mul	r1, r29
 4e0:	e1 f8       	bld	r14, 1
 4e2:	98 11       	cpse	r25, r8
 4e4:	69 d9       	rcall	.-3374   	; 0xfffff7b8 <__eeprom_end+0xff7ef7b8>
 4e6:	8e 94 9b 1e 	call	0x203d36	; 0x203d36 <__data_load_end+0x202e26>
 4ea:	87 e9       	ldi	r24, 0x97	; 151
 4ec:	ce 55       	subi	r28, 0x5E	; 94
 4ee:	28 df       	rcall	.-432    	; 0x340 <aes_init+0x4c>
 4f0:	8c a1       	ldd	r24, Y+36	; 0x24
 4f2:	89 0d       	add	r24, r9
 4f4:	bf e6       	ldi	r27, 0x6F	; 111
 4f6:	42 68       	ori	r20, 0x82	; 130
 4f8:	41 99       	sbic	0x08, 1	; 8
 4fa:	2d 0f       	add	r18, r29
 4fc:	b0 54       	subi	r27, 0x40	; 64
 4fe:	bb 16       	cp	r11, r27

00000500 <aes128_enc_single>:
	bcal_cbc_free(&ctx);
}

// encrypt single 128bit block. data is assumed to be 16 uint8_t's
// key and iv are assumed to be both 128bit thus 16 uint8_t's
void aes128_enc_single(const uint8_t* key, void* data){
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
 50c:	c0 5b       	subi	r28, 0xB0	; 176
 50e:	d1 09       	sbc	r29, r1
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	8b 01       	movw	r16, r22
	aes128_ctx_t ctx;
	aes128_init(key, &ctx);
 51c:	be 01       	movw	r22, r28
 51e:	6f 5f       	subi	r22, 0xFF	; 255
 520:	7f 4f       	sbci	r23, 0xFF	; 255
 522:	e5 de       	rcall	.-566    	; 0x2ee <aes128_init>
	aes128_enc(data, &ctx);
 524:	be 01       	movw	r22, r28
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	c8 01       	movw	r24, r16
 52c:	c9 dd       	rcall	.-1134   	; 0xc0 <aes128_enc>
}
 52e:	c0 55       	subi	r28, 0x50	; 80
 530:	df 4f       	sbci	r29, 0xFF	; 255
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	08 95       	ret

00000546 <_crc_xmodem_update>:
        : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    return __ret;
}
 546:	96 27       	eor	r25, r22
 548:	09 2e       	mov	r0, r25
 54a:	02 94       	swap	r0
 54c:	20 2d       	mov	r18, r0
 54e:	2f 70       	andi	r18, 0x0F	; 15
 550:	29 27       	eor	r18, r25
 552:	69 2f       	mov	r22, r25
 554:	60 25       	eor	r22, r0
 556:	66 0f       	add	r22, r22
 558:	60 7e       	andi	r22, 0xE0	; 224
 55a:	26 27       	eor	r18, r22
 55c:	60 2d       	mov	r22, r0
 55e:	69 27       	eor	r22, r25
 560:	60 7f       	andi	r22, 0xF0	; 240
 562:	66 95       	lsr	r22
 564:	09 2e       	mov	r0, r25
 566:	00 0c       	add	r0, r0
 568:	66 1f       	adc	r22, r22
 56a:	96 95       	lsr	r25
 56c:	96 95       	lsr	r25
 56e:	96 95       	lsr	r25
 570:	9f 71       	andi	r25, 0x1F	; 31
 572:	96 27       	eor	r25, r22
 574:	98 27       	eor	r25, r24
 576:	82 2f       	mov	r24, r18
 578:	08 95       	ret

0000057a <__vector_2>:
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	8f 93       	push	r24
 586:	f8 94       	cli
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	a8 95       	wdr
 58e:	81 b5       	in	r24, 0x21	; 33
 590:	88 61       	ori	r24, 0x18	; 24
 592:	81 bd       	out	0x21, r24	; 33
 594:	11 bc       	out	0x21, r1	; 33
 596:	0f be       	out	0x3f, r0	; 63
 598:	8f 91       	pop	r24
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	1f 90       	pop	r1
 5a2:	18 95       	reti

000005a4 <__vector_4>:
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	8f 93       	push	r24
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	a8 95       	wdr
 5b6:	81 b5       	in	r24, 0x21	; 33
 5b8:	88 61       	ori	r24, 0x18	; 24
 5ba:	81 bd       	out	0x21, r24	; 33
 5bc:	11 bc       	out	0x21, r1	; 33
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	8f 91       	pop	r24
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <resetWatchdog>:
 5cc:	14 be       	out	0x34, r1	; 52
 5ce:	88 e9       	ldi	r24, 0x98	; 152
 5d0:	81 bd       	out	0x21, r24	; 33
 5d2:	80 e6       	ldi	r24, 0x60	; 96
 5d4:	81 bd       	out	0x21, r24	; 33
 5d6:	a8 95       	wdr
 5d8:	08 95       	ret

000005da <adc_init>:
 5da:	86 e0       	ldi	r24, 0x06	; 6
 5dc:	86 b9       	out	0x06, r24	; 6
 5de:	81 e2       	ldi	r24, 0x21	; 33
 5e0:	87 b9       	out	0x07, r24	; 7
 5e2:	37 9a       	sbi	0x06, 7	; 6
 5e4:	08 95       	ret

000005e6 <goToSleep>:
 5e6:	85 b7       	in	r24, 0x35	; 53
 5e8:	87 7e       	andi	r24, 0xE7	; 231
 5ea:	80 61       	ori	r24, 0x10	; 16
 5ec:	85 bf       	out	0x35, r24	; 53
 5ee:	16 b8       	out	0x06, r1	; 6
 5f0:	f8 94       	cli
 5f2:	ec df       	rcall	.-40     	; 0x5cc <resetWatchdog>
 5f4:	85 b7       	in	r24, 0x35	; 53
 5f6:	80 62       	ori	r24, 0x20	; 32
 5f8:	85 bf       	out	0x35, r24	; 53
 5fa:	78 94       	sei
 5fc:	88 95       	sleep
 5fe:	85 b7       	in	r24, 0x35	; 53
 600:	8f 7d       	andi	r24, 0xDF	; 223
 602:	85 bf       	out	0x35, r24	; 53
 604:	08 95       	ret

00000606 <init_data_out>:
 606:	80 91 9f 00 	lds	r24, 0x009F
 60a:	ea eb       	ldi	r30, 0xBA	; 186
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 83       	st	Z, r24
 610:	2c ed       	ldi	r18, 0xDC	; 220
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	33 83       	std	Z+3, r19	; 0x03
 616:	22 83       	std	Z+2, r18	; 0x02
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	91 83       	std	Z+1, r25	; 0x01
 61c:	85 83       	std	Z+5, r24	; 0x05
 61e:	14 82       	std	Z+4, r1	; 0x04
 620:	08 95       	ret

00000622 <readConfig>:
 622:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <readConfig+0x6>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <readConfig+0xc>
 62e:	00 00       	nop
 630:	d9 9a       	sbi	0x1b, 1	; 27
 632:	9a ea       	ldi	r25, 0xAA	; 170
 634:	9a 95       	dec	r25
 636:	f1 f7       	brne	.-4      	; 0x634 <readConfig+0x12>
 638:	00 c0       	rjmp	.+0      	; 0x63a <readConfig+0x18>
 63a:	e2 ed       	ldi	r30, 0xD2	; 210
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	87 e0       	ldi	r24, 0x07	; 7
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	d9 98       	cbi	0x1b, 1	; 27
 648:	00 c0       	rjmp	.+0      	; 0x64a <readConfig+0x28>
 64a:	d9 9a       	sbi	0x1b, 1	; 27
 64c:	00 c0       	rjmp	.+0      	; 0x64e <readConfig+0x2c>
 64e:	d1 98       	cbi	0x1a, 1	; 26
 650:	d9 98       	cbi	0x1b, 1	; 27
 652:	00 c0       	rjmp	.+0      	; 0x654 <readConfig+0x32>
 654:	00 c0       	rjmp	.+0      	; 0x656 <readConfig+0x34>
 656:	c9 9b       	sbis	0x19, 1	; 25
 658:	09 c0       	rjmp	.+18     	; 0x66c <readConfig+0x4a>
 65a:	60 81       	ld	r22, Z
 65c:	9a 01       	movw	r18, r20
 65e:	08 2e       	mov	r0, r24
 660:	01 c0       	rjmp	.+2      	; 0x664 <readConfig+0x42>
 662:	22 0f       	add	r18, r18
 664:	0a 94       	dec	r0
 666:	ea f7       	brpl	.-6      	; 0x662 <readConfig+0x40>
 668:	26 2b       	or	r18, r22
 66a:	09 c0       	rjmp	.+18     	; 0x67e <readConfig+0x5c>
 66c:	9a 01       	movw	r18, r20
 66e:	08 2e       	mov	r0, r24
 670:	01 c0       	rjmp	.+2      	; 0x674 <readConfig+0x52>
 672:	22 0f       	add	r18, r18
 674:	0a 94       	dec	r0
 676:	ea f7       	brpl	.-6      	; 0x672 <readConfig+0x50>
 678:	20 95       	com	r18
 67a:	30 81       	ld	r19, Z
 67c:	23 23       	and	r18, r19
 67e:	20 83       	st	Z, r18
 680:	d1 9a       	sbi	0x1a, 1	; 26
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	00 f7       	brcc	.-64     	; 0x646 <readConfig+0x24>
 686:	31 97       	sbiw	r30, 0x01	; 1
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	ed 3c       	cpi	r30, 0xCD	; 205
 68c:	f8 07       	cpc	r31, r24
 68e:	c9 f6       	brne	.-78     	; 0x642 <readConfig+0x20>
 690:	d9 98       	cbi	0x1b, 1	; 27
 692:	d1 98       	cbi	0x1a, 1	; 26
 694:	08 95       	ret

00000696 <ack_int>:
 696:	d1 9a       	sbi	0x1a, 1	; 26
 698:	d9 98       	cbi	0x1b, 1	; 27
 69a:	d1 98       	cbi	0x1a, 1	; 26
 69c:	d9 98       	cbi	0x1b, 1	; 27
 69e:	08 95       	ret

000006a0 <writeConfig>:
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	fc 01       	movw	r30, r24
 6ac:	ec 54       	subi	r30, 0x4C	; 76
 6ae:	ff 4f       	sbci	r31, 0xFF	; 255
 6b0:	d8 9a       	sbi	0x1b, 0	; 27
 6b2:	45 e0       	ldi	r20, 0x05	; 5
 6b4:	4a 95       	dec	r20
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <writeConfig+0x14>
 6b8:	00 00       	nop
 6ba:	40 81       	ld	r20, Z
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	02 2e       	mov	r0, r18
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <writeConfig+0x26>
 6c2:	55 95       	asr	r21
 6c4:	47 95       	ror	r20
 6c6:	0a 94       	dec	r0
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <writeConfig+0x22>
 6ca:	40 ff       	sbrs	r20, 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <writeConfig+0x32>
 6ce:	d8 9a       	sbi	0x1b, 0	; 27
 6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <writeConfig+0x34>
 6d2:	d8 98       	cbi	0x1b, 0	; 27
 6d4:	4a ea       	ldi	r20, 0xAA	; 170
 6d6:	4a 95       	dec	r20
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <writeConfig+0x36>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <writeConfig+0x3c>
 6dc:	d8 98       	cbi	0x1b, 0	; 27
 6de:	45 e0       	ldi	r20, 0x05	; 5
 6e0:	4a 95       	dec	r20
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <writeConfig+0x40>
 6e4:	00 00       	nop
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	31 09       	sbc	r19, r1
 6ea:	10 f7       	brcc	.-60     	; 0x6b0 <writeConfig+0x10>
 6ec:	27 e0       	ldi	r18, 0x07	; 7
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	d1 f6       	brne	.-76     	; 0x6a8 <writeConfig+0x8>
 6f4:	08 95       	ret

000006f6 <setup>:
 6f6:	40 e2       	ldi	r20, 0x20	; 32
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	60 e4       	ldi	r22, 0x40	; 64
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	80 e6       	ldi	r24, 0x60	; 96
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	95 d3       	rcall	.+1834   	; 0xe2e <memcpy_P>
 704:	80 91 70 00 	lds	r24, 0x0070
 708:	80 93 9f 00 	sts	0x009F, r24
 70c:	b0 d2       	rcall	.+1376   	; 0xc6e <spi_init>
 70e:	98 d1       	rcall	.+816    	; 0xa40 <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 710:	2f e7       	ldi	r18, 0x7F	; 127
 712:	88 e3       	ldi	r24, 0x38	; 56
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	21 50       	subi	r18, 0x01	; 1
 718:	80 40       	sbci	r24, 0x00	; 0
 71a:	90 40       	sbci	r25, 0x00	; 0
 71c:	e1 f7       	brne	.-8      	; 0x716 <setup+0x20>
 71e:	00 c0       	rjmp	.+0      	; 0x720 <setup+0x2a>
 720:	00 00       	nop
 722:	c4 d1       	rcall	.+904    	; 0xaac <mirf_config>
 724:	d7 9a       	sbi	0x1a, 7	; 26
 726:	ba 9a       	sbi	0x17, 2	; 23
 728:	d3 98       	cbi	0x1a, 3	; 26
 72a:	d0 9a       	sbi	0x1a, 0	; 26
 72c:	d1 9a       	sbi	0x1a, 1	; 26
 72e:	e7 eb       	ldi	r30, 0xB7	; 183
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	8e 7f       	andi	r24, 0xFE	; 254
 736:	80 83       	st	Z, r24
 738:	a5 eb       	ldi	r26, 0xB5	; 181
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	9c 91       	ld	r25, X
 73e:	88 e2       	ldi	r24, 0x28	; 40
 740:	80 93 b6 00 	sts	0x00B6, r24
 744:	91 70       	andi	r25, 0x01	; 1
 746:	e4 eb       	ldi	r30, 0xB4	; 180
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	90 6d       	ori	r25, 0xD0	; 208
 74e:	91 60       	ori	r25, 0x01	; 1
 750:	9c 93       	st	X, r25
 752:	87 71       	andi	r24, 0x17	; 23
 754:	80 62       	ori	r24, 0x20	; 32
 756:	8f 7e       	andi	r24, 0xEF	; 239
 758:	80 83       	st	Z, r24
 75a:	a2 df       	rcall	.-188    	; 0x6a0 <writeConfig>
 75c:	8f ec       	ldi	r24, 0xCF	; 207
 75e:	97 e0       	ldi	r25, 0x07	; 7
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <setup+0x6a>
 764:	00 c0       	rjmp	.+0      	; 0x766 <setup+0x70>
 766:	00 00       	nop
 768:	5c df       	rcall	.-328    	; 0x622 <readConfig>
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	82 bb       	out	0x12, r24	; 18
 76e:	8a b7       	in	r24, 0x3a	; 58
 770:	80 61       	ori	r24, 0x10	; 16
 772:	8a bf       	out	0x3a, r24	; 58
 774:	8b b7       	in	r24, 0x3b	; 59
 776:	80 61       	ori	r24, 0x10	; 16
 778:	8b bf       	out	0x3b, r24	; 59
 77a:	08 95       	ret

0000077c <main>:
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	00 d0       	rcall	.+0      	; 0x782 <main+0x6>
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	b7 df       	rcall	.-146    	; 0x6f6 <setup>
 788:	80 91 9f 00 	lds	r24, 0x009F
 78c:	80 93 ba 00 	sts	0x00BA, r24
 790:	e0 e6       	ldi	r30, 0x60	; 96
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	ab eb       	ldi	r26, 0xBB	; 187
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	81 91       	ld	r24, Z+
 79a:	8d 93       	st	X+, r24
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	e0 37       	cpi	r30, 0x70	; 112
 7a0:	f2 07       	cpc	r31, r18
 7a2:	d1 f7       	brne	.-12     	; 0x798 <main+0x1c>
 7a4:	0a eb       	ldi	r16, 0xBA	; 186
 7a6:	10 e0       	ldi	r17, 0x00	; 0
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	f8 01       	movw	r30, r16
 7ae:	61 91       	ld	r22, Z+
 7b0:	8f 01       	movw	r16, r30
 7b2:	c9 de       	rcall	.-622    	; 0x546 <_crc_xmodem_update>
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	0b 3c       	cpi	r16, 0xCB	; 203
 7b8:	1f 07       	cpc	r17, r31
 7ba:	c1 f7       	brne	.-16     	; 0x7ac <main+0x30>
 7bc:	89 83       	std	Y+1, r24	; 0x01
 7be:	9a 83       	std	Y+2, r25	; 0x02
 7c0:	22 df       	rcall	.-444    	; 0x606 <init_data_out>
 7c2:	40 91 71 00 	lds	r20, 0x0071
 7c6:	20 91 72 00 	lds	r18, 0x0072
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	32 2f       	mov	r19, r18
 7ce:	22 27       	eor	r18, r18
 7d0:	24 0f       	add	r18, r20
 7d2:	31 1d       	adc	r19, r1
 7d4:	40 91 70 00 	lds	r20, 0x0070
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	9a 81       	ldd	r25, Y+2	; 0x02
 7dc:	4f 3f       	cpi	r20, 0xFF	; 255
 7de:	21 f4       	brne	.+8      	; 0x7e8 <main+0x6c>
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	80 93 bf 00 	sts	0x00BF, r24
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <main+0x72>
 7e8:	82 17       	cp	r24, r18
 7ea:	93 07       	cpc	r25, r19
 7ec:	c9 f7       	brne	.-14     	; 0x7e0 <main+0x64>
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	80 93 ba 00 	sts	0x00BA, r24
 7f4:	00 e0       	ldi	r16, 0x00	; 0
 7f6:	10 e0       	ldi	r17, 0x00	; 0
 7f8:	33 e0       	ldi	r19, 0x03	; 3
 7fa:	c3 2e       	mov	r12, r19
 7fc:	d1 2c       	mov	r13, r1
 7fe:	81 2c       	mov	r8, r1
 800:	40 e3       	ldi	r20, 0x30	; 48
 802:	94 2e       	mov	r9, r20
 804:	41 e1       	ldi	r20, 0x11	; 17
 806:	a4 2e       	mov	r10, r20
 808:	b1 2c       	mov	r11, r1
 80a:	50 e1       	ldi	r21, 0x10	; 16
 80c:	f5 2e       	mov	r15, r21
 80e:	ee 24       	eor	r14, r14
 810:	e3 94       	inc	r14
 812:	80 91 ba 00 	lds	r24, 0x00BA
 816:	8f 3f       	cpi	r24, 0xFF	; 255
 818:	09 f0       	breq	.+2      	; 0x81c <main+0xa0>
 81a:	46 c0       	rjmp	.+140    	; 0x8a8 <main+0x12c>
 81c:	80 91 bf 00 	lds	r24, 0x00BF
 820:	8f 3f       	cpi	r24, 0xFF	; 255
 822:	21 f0       	breq	.+8      	; 0x82c <main+0xb0>
 824:	05 30       	cpi	r16, 0x05	; 5
 826:	11 05       	cpc	r17, r1
 828:	0c f0       	brlt	.+2      	; 0x82c <main+0xb0>
 82a:	3e c0       	rjmp	.+124    	; 0x8a8 <main+0x12c>
 82c:	6a e0       	ldi	r22, 0x0A	; 10
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	13 d1       	rcall	.+550    	; 0xa58 <mirf_config_register>
 832:	8f e9       	ldi	r24, 0x9F	; 159
 834:	9f e0       	ldi	r25, 0x0F	; 15
 836:	01 97       	sbiw	r24, 0x01	; 1
 838:	f1 f7       	brne	.-4      	; 0x836 <main+0xba>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <main+0xc0>
 83c:	00 00       	nop
 83e:	6c d1       	rcall	.+728    	; 0xb18 <mirf_transmit_data>
 840:	68 e0       	ldi	r22, 0x08	; 8
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	09 d1       	rcall	.+530    	; 0xa58 <mirf_config_register>
 846:	ef e6       	ldi	r30, 0x6F	; 111
 848:	f7 e1       	ldi	r31, 0x17	; 23
 84a:	31 97       	sbiw	r30, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <main+0xce>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <main+0xd4>
 850:	00 00       	nop
 852:	6b e0       	ldi	r22, 0x0B	; 11
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	00 d1       	rcall	.+512    	; 0xa58 <mirf_config_register>
 858:	8f e6       	ldi	r24, 0x6F	; 111
 85a:	97 e1       	ldi	r25, 0x17	; 23
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	f1 f7       	brne	.-4      	; 0x85c <main+0xe0>
 860:	00 c0       	rjmp	.+0      	; 0x862 <main+0xe6>
 862:	00 00       	nop
 864:	df 98       	cbi	0x1b, 7	; 27
 866:	82 ee       	ldi	r24, 0xE2	; 226
 868:	bf d1       	rcall	.+894    	; 0xbe8 <spi_transfer>
 86a:	df 9a       	sbi	0x1b, 7	; 27
 86c:	c2 9a       	sbi	0x18, 2	; 24
 86e:	25 e6       	ldi	r18, 0x65	; 101
 870:	62 2e       	mov	r6, r18
 872:	71 2c       	mov	r7, r1
 874:	ea d0       	rcall	.+468    	; 0xa4a <mirf_status>
 876:	86 fd       	sbrc	r24, 6
 878:	8b c0       	rjmp	.+278    	; 0x990 <main+0x214>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 87a:	e7 ee       	ldi	r30, 0xE7	; 231
 87c:	f3 e0       	ldi	r31, 0x03	; 3
 87e:	31 97       	sbiw	r30, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <main+0x102>
 882:	00 c0       	rjmp	.+0      	; 0x884 <main+0x108>
 884:	00 00       	nop
 886:	f1 e0       	ldi	r31, 0x01	; 1
 888:	6f 1a       	sub	r6, r31
 88a:	71 08       	sbc	r7, r1
 88c:	99 f7       	brne	.-26     	; 0x874 <main+0xf8>
 88e:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 890:	2f ef       	ldi	r18, 0xFF	; 255
 892:	80 e7       	ldi	r24, 0x70	; 112
 894:	92 e0       	ldi	r25, 0x02	; 2
 896:	21 50       	subi	r18, 0x01	; 1
 898:	80 40       	sbci	r24, 0x00	; 0
 89a:	90 40       	sbci	r25, 0x00	; 0
 89c:	e1 f7       	brne	.-8      	; 0x896 <main+0x11a>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <main+0x124>
 8a0:	00 00       	nop
 8a2:	0f 5f       	subi	r16, 0xFF	; 255
 8a4:	1f 4f       	sbci	r17, 0xFF	; 255
 8a6:	b5 cf       	rjmp	.-150    	; 0x812 <main+0x96>
 8a8:	68 e0       	ldi	r22, 0x08	; 8
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	d5 d0       	rcall	.+426    	; 0xa58 <mirf_config_register>
 8ae:	9b de       	rcall	.-714    	; 0x5e6 <goToSleep>
 8b0:	94 de       	rcall	.-728    	; 0x5da <adc_init>
 8b2:	10 92 bd 00 	sts	0x00BD, r1
 8b6:	10 92 bc 00 	sts	0x00BC, r1
 8ba:	8f e9       	ldi	r24, 0x9F	; 159
 8bc:	9f e0       	ldi	r25, 0x0F	; 15
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <main+0x142>
 8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <main+0x148>
 8c4:	00 00       	nop
 8c6:	c9 9b       	sbis	0x19, 1	; 25
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <main+0x156>
 8ca:	e0 92 be 00 	sts	0x00BE, r14
 8ce:	e3 de       	rcall	.-570    	; 0x696 <ack_int>
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <main+0x15a>
 8d2:	10 92 be 00 	sts	0x00BE, r1
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	36 9a       	sbi	0x06, 6	; 6
 8dc:	36 99       	sbic	0x06, 6	; 6
 8de:	fe cf       	rjmp	.-4      	; 0x8dc <main+0x160>
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	61 f0       	breq	.+24     	; 0x8fc <main+0x180>
 8e4:	24 b1       	in	r18, 0x04	; 4
 8e6:	35 b1       	in	r19, 0x05	; 5
 8e8:	40 91 bc 00 	lds	r20, 0x00BC
 8ec:	50 91 bd 00 	lds	r21, 0x00BD
 8f0:	24 0f       	add	r18, r20
 8f2:	35 1f       	adc	r19, r21
 8f4:	30 93 bd 00 	sts	0x00BD, r19
 8f8:	20 93 bc 00 	sts	0x00BC, r18
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	84 30       	cpi	r24, 0x04	; 4
 900:	91 05       	cpc	r25, r1
 902:	59 f7       	brne	.-42     	; 0x8da <main+0x15e>
 904:	80 91 bc 00 	lds	r24, 0x00BC
 908:	90 91 bd 00 	lds	r25, 0x00BD
 90c:	b6 01       	movw	r22, r12
 90e:	31 d2       	rcall	.+1122   	; 0xd72 <__udivmodhi4>
 910:	9b 01       	movw	r18, r22
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	c5 01       	movw	r24, r10
 918:	b4 01       	movw	r22, r8
 91a:	3f d2       	rcall	.+1150   	; 0xd9a <__divmodsi4>
 91c:	30 93 bd 00 	sts	0x00BD, r19
 920:	20 93 bc 00 	sts	0x00BC, r18
 924:	8a eb       	ldi	r24, 0xBA	; 186
 926:	68 2e       	mov	r6, r24
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	78 2e       	mov	r7, r24
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	f3 01       	movw	r30, r6
 932:	61 91       	ld	r22, Z+
 934:	3f 01       	movw	r6, r30
 936:	07 de       	rcall	.-1010   	; 0x546 <_crc_xmodem_update>
 938:	ff eb       	ldi	r31, 0xBF	; 191
 93a:	6f 16       	cp	r6, r31
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	7f 06       	cpc	r7, r31
 940:	b9 f7       	brne	.-18     	; 0x930 <main+0x1b4>
 942:	90 93 c1 00 	sts	0x00C1, r25
 946:	80 93 c0 00 	sts	0x00C0, r24
 94a:	ea eb       	ldi	r30, 0xBA	; 186
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	a0 e7       	ldi	r26, 0x70	; 112
 950:	b0 e0       	ldi	r27, 0x00	; 0
 952:	8f 2d       	mov	r24, r15
 954:	01 90       	ld	r0, Z+
 956:	0d 92       	st	X+, r0
 958:	8a 95       	dec	r24
 95a:	e1 f7       	brne	.-8      	; 0x954 <main+0x1d8>
 95c:	60 e7       	ldi	r22, 0x70	; 112
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	80 e6       	ldi	r24, 0x60	; 96
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	cd dd       	rcall	.-1126   	; 0x500 <aes128_enc_single>
 966:	e0 e7       	ldi	r30, 0x70	; 112
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	aa eb       	ldi	r26, 0xBA	; 186
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	8f 2d       	mov	r24, r15
 970:	01 90       	ld	r0, Z+
 972:	0d 92       	st	X+, r0
 974:	8a 95       	dec	r24
 976:	e1 f7       	brne	.-8      	; 0x970 <main+0x1f4>
 978:	6a e0       	ldi	r22, 0x0A	; 10
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	6d d0       	rcall	.+218    	; 0xa58 <mirf_config_register>
 97e:	8f e6       	ldi	r24, 0x6F	; 111
 980:	97 e1       	ldi	r25, 0x17	; 23
 982:	01 97       	sbiw	r24, 0x01	; 1
 984:	f1 f7       	brne	.-4      	; 0x982 <main+0x206>
 986:	00 c0       	rjmp	.+0      	; 0x988 <main+0x20c>
 988:	00 00       	nop
 98a:	c6 d0       	rcall	.+396    	; 0xb18 <mirf_transmit_data>
 98c:	3c de       	rcall	.-904    	; 0x606 <init_data_out>
 98e:	41 cf       	rjmp	.-382    	; 0x812 <main+0x96>
 990:	c2 98       	cbi	0x18, 2	; 24
 992:	00 d1       	rcall	.+512    	; 0xb94 <mirf_receive_data>
 994:	80 91 a0 00 	lds	r24, 0x00A0
 998:	9f ef       	ldi	r25, 0xFF	; 255
 99a:	98 0f       	add	r25, r24
 99c:	9e 3f       	cpi	r25, 0xFE	; 254
 99e:	08 f0       	brcs	.+2      	; 0x9a2 <main+0x226>
 9a0:	38 cf       	rjmp	.-400    	; 0x812 <main+0x96>
 9a2:	80 93 9f 00 	sts	0x009F, r24
 9a6:	a3 d0       	rcall	.+326    	; 0xaee <mirf_reconfig_tx>
 9a8:	80 91 9f 00 	lds	r24, 0x009F
 9ac:	80 93 ba 00 	sts	0x00BA, r24
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	fc 01       	movw	r30, r24
 9b8:	e6 54       	subi	r30, 0x46	; 70
 9ba:	ff 4f       	sbci	r31, 0xFF	; 255
 9bc:	dc 01       	movw	r26, r24
 9be:	a0 56       	subi	r26, 0x60	; 96
 9c0:	bf 4f       	sbci	r27, 0xFF	; 255
 9c2:	2c 91       	ld	r18, X
 9c4:	20 83       	st	Z, r18
 9c6:	80 31       	cpi	r24, 0x10	; 16
 9c8:	91 05       	cpc	r25, r1
 9ca:	a1 f7       	brne	.-24     	; 0x9b4 <main+0x238>
 9cc:	9a eb       	ldi	r25, 0xBA	; 186
 9ce:	69 2e       	mov	r6, r25
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	79 2e       	mov	r7, r25
 9d4:	41 2c       	mov	r4, r1
 9d6:	51 2c       	mov	r5, r1
 9d8:	f3 01       	movw	r30, r6
 9da:	61 91       	ld	r22, Z+
 9dc:	3f 01       	movw	r6, r30
 9de:	c2 01       	movw	r24, r4
 9e0:	b2 dd       	rcall	.-1180   	; 0x546 <_crc_xmodem_update>
 9e2:	2c 01       	movw	r4, r24
 9e4:	fb ec       	ldi	r31, 0xCB	; 203
 9e6:	6f 16       	cp	r6, r31
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	7f 06       	cpc	r7, r31
 9ec:	a9 f7       	brne	.-22     	; 0x9d8 <main+0x25c>
 9ee:	80 91 b1 00 	lds	r24, 0x00B1
 9f2:	90 91 b2 00 	lds	r25, 0x00B2
 9f6:	48 16       	cp	r4, r24
 9f8:	59 06       	cpc	r5, r25
 9fa:	29 f0       	breq	.+10     	; 0xa06 <main+0x28a>
 9fc:	e0 91 92 00 	lds	r30, 0x0092
 a00:	f0 91 93 00 	lds	r31, 0x0093
 a04:	09 95       	icall
 a06:	ff dd       	rcall	.-1026   	; 0x606 <init_data_out>
 a08:	e1 ea       	ldi	r30, 0xA1	; 161
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	a0 e6       	ldi	r26, 0x60	; 96
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	8f 2d       	mov	r24, r15
 a12:	01 90       	ld	r0, Z+
 a14:	0d 92       	st	X+, r0
 a16:	8a 95       	dec	r24
 a18:	e1 f7       	brne	.-8      	; 0xa12 <main+0x296>
 a1a:	80 91 ba 00 	lds	r24, 0x00BA
 a1e:	80 93 70 00 	sts	0x0070, r24
 a22:	40 92 71 00 	sts	0x0071, r4
 a26:	50 92 72 00 	sts	0x0072, r5
 a2a:	60 e6       	ldi	r22, 0x60	; 96
 a2c:	70 e0       	ldi	r23, 0x00	; 0
 a2e:	80 e4       	ldi	r24, 0x40	; 64
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	08 d2       	rcall	.+1040   	; 0xe44 <_etext>
 a34:	e0 91 92 00 	lds	r30, 0x0092
 a38:	f0 91 93 00 	lds	r31, 0x0093
 a3c:	09 95       	icall
 a3e:	e9 ce       	rjmp	.-558    	; 0x812 <main+0x96>

00000a40 <mirf_init>:

// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
void mirf_init(void) {
	// Define CSN and CE as Output and set them to default
	DDRB |= (1<<CE);
 a40:	ba 9a       	sbi	0x17, 2	; 23
	DDRA |= (1<<CSN);
 a42:	d7 9a       	sbi	0x1a, 7	; 26
	mirf_CE_lo;
 a44:	c2 98       	cbi	0x18, 2	; 24
	mirf_CSN_hi;
 a46:	df 9a       	sbi	0x1b, 7	; 27
 a48:	08 95       	ret

00000a4a <mirf_status>:
	TX_POWERUP;
}

// Read the status register
uint8_t mirf_status(void) {
	mirf_CSN_lo; // Pull down chip select
 a4a:	df 98       	cbi	0x1b, 7	; 27
	spi_transfer(R_REGISTER | (REGISTER_MASK & STATUS));
 a4c:	87 e0       	ldi	r24, 0x07	; 7
 a4e:	cc d0       	rcall	.+408    	; 0xbe8 <spi_transfer>
	uint8_t status = spi_transfer(NOP); // Read status register
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	ca d0       	rcall	.+404    	; 0xbe8 <spi_transfer>
	mirf_CSN_hi; // Pull up chip select
 a54:	df 9a       	sbi	0x1b, 7	; 27
	return status;
}
 a56:	08 95       	ret

00000a58 <mirf_config_register>:
	mirf_CSN_hi; // Pull up chip select
	mirf_config_register(STATUS,(1<<RX_DR)); // Reset status register
}

// Write one byte into the MiRF register
void mirf_config_register(uint8_t reg, uint8_t value) {
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	1f 92       	push	r1
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
	mirf_CSN_lo;
 a62:	df 98       	cbi	0x1b, 7	; 27
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 a64:	8f 71       	andi	r24, 0x1F	; 31
 a66:	80 62       	ori	r24, 0x20	; 32
 a68:	69 83       	std	Y+1, r22	; 0x01
 a6a:	be d0       	rcall	.+380    	; 0xbe8 <spi_transfer>
	spi_transfer(value);
 a6c:	69 81       	ldd	r22, Y+1	; 0x01
 a6e:	86 2f       	mov	r24, r22
 a70:	bb d0       	rcall	.+374    	; 0xbe8 <spi_transfer>
	mirf_CSN_hi;
 a72:	df 9a       	sbi	0x1b, 7	; 27
}
 a74:	0f 90       	pop	r0
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	08 95       	ret

00000a7c <mirf_write_register>:
	spi_read_data(value, len);
	mirf_CSN_hi;
}

// Writes an array of bytes into the MiRF register
void mirf_write_register(uint8_t reg, uint8_t *value, uint8_t len) {
 a7c:	0f 93       	push	r16
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	1f 92       	push	r1
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	8b 01       	movw	r16, r22
	mirf_CSN_lo;
 a8c:	df 98       	cbi	0x1b, 7	; 27
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 a8e:	8f 71       	andi	r24, 0x1F	; 31
 a90:	80 62       	ori	r24, 0x20	; 32
 a92:	49 83       	std	Y+1, r20	; 0x01
 a94:	a9 d0       	rcall	.+338    	; 0xbe8 <spi_transfer>
	spi_write_data(value, len);
 a96:	49 81       	ldd	r20, Y+1	; 0x01
 a98:	64 2f       	mov	r22, r20
 a9a:	c8 01       	movw	r24, r16
 a9c:	af d0       	rcall	.+350    	; 0xbfc <spi_write_data>
	mirf_CSN_hi;
 a9e:	df 9a       	sbi	0x1b, 7	; 27
}
 aa0:	0f 90       	pop	r0
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	08 95       	ret

00000aac <mirf_config>:

// Sets the important registers in the MiRF module and powers the module
// in receiving mode
void mirf_config(void) {
	// Set RF channel
	mirf_config_register(RF_CH, mirf_CH);
 aac:	65 e0       	ldi	r22, 0x05	; 5
 aae:	85 e0       	ldi	r24, 0x05	; 5
 ab0:	d3 df       	rcall	.-90     	; 0xa58 <mirf_config_register>
	
	// Set length of incoming payload 
	mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 ab2:	64 e1       	ldi	r22, 0x14	; 20
 ab4:	81 e1       	ldi	r24, 0x11	; 17
 ab6:	d0 df       	rcall	.-96     	; 0xa58 <mirf_config_register>
	mirf_config_register(RX_PW_P1, mirf_PAYLOAD);
 ab8:	64 e1       	ldi	r22, 0x14	; 20
 aba:	82 e1       	ldi	r24, 0x12	; 18
 abc:	cd df       	rcall	.-102    	; 0xa58 <mirf_config_register>
	
	// Set auto retransmit delay to 500uS and leave auto retransmit count to 3
	mirf_config_register(SETUP_RETR, (1<<4) | 3);
 abe:	63 e1       	ldi	r22, 0x13	; 19
 ac0:	84 e0       	ldi	r24, 0x04	; 4
 ac2:	ca df       	rcall	.-108    	; 0xa58 <mirf_config_register>
	
	// Set RADDR and TADDR
	mirf_write_register(RX_ADDR_P0, TADDR, 5);
 ac4:	45 e0       	ldi	r20, 0x05	; 5
 ac6:	60 e8       	ldi	r22, 0x80	; 128
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	8a e0       	ldi	r24, 0x0A	; 10
 acc:	d7 df       	rcall	.-82     	; 0xa7c <mirf_write_register>
	mirf_write_register(RX_ADDR_P1, RADDR2, 5);
 ace:	45 e0       	ldi	r20, 0x05	; 5
 ad0:	66 e8       	ldi	r22, 0x86	; 134
 ad2:	70 e0       	ldi	r23, 0x00	; 0
 ad4:	8b e0       	ldi	r24, 0x0B	; 11
 ad6:	d2 df       	rcall	.-92     	; 0xa7c <mirf_write_register>
	mirf_write_register(TX_ADDR, TADDR, 5);
 ad8:	45 e0       	ldi	r20, 0x05	; 5
 ada:	60 e8       	ldi	r22, 0x80	; 128
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	80 e1       	ldi	r24, 0x10	; 16
 ae0:	cd df       	rcall	.-102    	; 0xa7c <mirf_write_register>
	
	// Enable RX_ADDR_P0 and RX_ADDR_P1 address matching since we also enable auto acknowledgement
	mirf_config_register(EN_RXADDR, (1<<ERX_P0 | 1<<ERX_P1));
 ae2:	63 e0       	ldi	r22, 0x03	; 3
 ae4:	82 e0       	ldi	r24, 0x02	; 2
 ae6:	b8 df       	rcall	.-144    	; 0xa58 <mirf_config_register>

	// Power up in transmitter mode
	TX_POWERUP;
 ae8:	6a e0       	ldi	r22, 0x0A	; 10
 aea:	80 e0       	ldi	r24, 0x00	; 0
 aec:	b5 cf       	rjmp	.-150    	; 0xa58 <mirf_config_register>

00000aee <mirf_reconfig_tx>:
	TX_POWERUP;
}

void mirf_reconfig_tx(void) {

	POWERDOWN;
 aee:	68 e0       	ldi	r22, 0x08	; 8
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	b2 df       	rcall	.-156    	; 0xa58 <mirf_config_register>
	// Set RADDR and TADDR
	mirf_write_register(RX_ADDR_P0, TADDR, 5);
 af4:	45 e0       	ldi	r20, 0x05	; 5
 af6:	60 e8       	ldi	r22, 0x80	; 128
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	8a e0       	ldi	r24, 0x0A	; 10
 afc:	bf df       	rcall	.-130    	; 0xa7c <mirf_write_register>
	mirf_write_register(RX_ADDR_P1, RADDR, 5);
 afe:	45 e0       	ldi	r20, 0x05	; 5
 b00:	6c e8       	ldi	r22, 0x8C	; 140
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	8b e0       	ldi	r24, 0x0B	; 11
 b06:	ba df       	rcall	.-140    	; 0xa7c <mirf_write_register>
	mirf_write_register(TX_ADDR, TADDR, 5);
 b08:	45 e0       	ldi	r20, 0x05	; 5
 b0a:	60 e8       	ldi	r22, 0x80	; 128
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	80 e1       	ldi	r24, 0x10	; 16
 b10:	b5 df       	rcall	.-150    	; 0xa7c <mirf_write_register>

	// Power up in transmitter mode
	TX_POWERUP;
 b12:	6a e0       	ldi	r22, 0x0A	; 10
 b14:	80 e0       	ldi	r24, 0x00	; 0
 b16:	a0 cf       	rjmp	.-192    	; 0xa58 <mirf_config_register>

00000b18 <mirf_transmit_data>:
	spi_write_data(value, len);
	mirf_CSN_hi;
}

// Send data and wait for an ACK
uint8_t mirf_transmit_data(void) {
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
	TX_POWERUP; // Power up to transmitter mode
 b1e:	6a e0       	ldi	r22, 0x0A	; 10
 b20:	80 e0       	ldi	r24, 0x00	; 0
 b22:	9a df       	rcall	.-204    	; 0xa58 <mirf_config_register>
	
	mirf_CSN_lo; // Pull down chip select
 b24:	df 98       	cbi	0x1b, 7	; 27
	spi_transfer(FLUSH_TX); // Write cmd to flush tx fifo
 b26:	81 ee       	ldi	r24, 0xE1	; 225
 b28:	5f d0       	rcall	.+190    	; 0xbe8 <spi_transfer>
	mirf_CSN_hi; // Pull up chip select
 b2a:	df 9a       	sbi	0x1b, 7	; 27
	
	mirf_CSN_lo;  // Pull down chip select
 b2c:	df 98       	cbi	0x1b, 7	; 27
	spi_transfer(W_TX_PAYLOAD); // Write cmd to write payload
 b2e:	80 ea       	ldi	r24, 0xA0	; 160
 b30:	5b d0       	rcall	.+182    	; 0xbe8 <spi_transfer>
	spi_write_data(data_out.as_data.data, sizeof(data_out.as_data.data)); // Write payload
 b32:	64 e1       	ldi	r22, 0x14	; 20
 b34:	8a eb       	ldi	r24, 0xBA	; 186
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	61 d0       	rcall	.+194    	; 0xbfc <spi_write_data>
	mirf_CSN_hi; // Pull up chip select
 b3a:	df 9a       	sbi	0x1b, 7	; 27
	
	mirf_CE_hi; // Start transmission
 b3c:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b3e:	88 e2       	ldi	r24, 0x28	; 40
 b40:	8a 95       	dec	r24
 b42:	f1 f7       	brne	.-4      	; 0xb40 <mirf_transmit_data+0x28>
	_delay_us(15);
	mirf_CE_lo;
 b44:	c2 98       	cbi	0x18, 2	; 24
	
	int waitcount = 0;
	while (!(mirf_status() & (1<<TX_DS))) { // Wait until we receive an ACK back
 b46:	ca e0       	ldi	r28, 0x0A	; 10
 b48:	d0 e0       	ldi	r29, 0x00	; 0
 b4a:	7f df       	rcall	.-258    	; 0xa4a <mirf_status>
 b4c:	18 2f       	mov	r17, r24
 b4e:	10 72       	andi	r17, 0x20	; 32
 b50:	85 fd       	sbrc	r24, 5
 b52:	17 c0       	rjmp	.+46     	; 0xb82 <mirf_transmit_data+0x6a>
 b54:	87 ee       	ldi	r24, 0xE7	; 231
 b56:	93 e0       	ldi	r25, 0x03	; 3
 b58:	01 97       	sbiw	r24, 0x01	; 1
 b5a:	f1 f7       	brne	.-4      	; 0xb58 <mirf_transmit_data+0x40>
 b5c:	00 c0       	rjmp	.+0      	; 0xb5e <mirf_transmit_data+0x46>
 b5e:	00 00       	nop
		_delay_us(500); // Wait the auto retransmit time
		if (mirf_status() & (1<<MAX_RT)) { // If maximum retries reached
 b60:	74 df       	rcall	.-280    	; 0xa4a <mirf_status>
 b62:	84 ff       	sbrs	r24, 4
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <mirf_transmit_data+0x5e>
			mirf_config_register(STATUS, 1<<MAX_RT); // Reset maximum retries to be able to transmit again next time
 b66:	60 e1       	ldi	r22, 0x10	; 16
 b68:	87 e0       	ldi	r24, 0x07	; 7
 b6a:	76 df       	rcall	.-276    	; 0xa58 <mirf_config_register>
			mirf_CE_hi;
 b6c:	c2 9a       	sbi	0x18, 2	; 24
 b6e:	98 e2       	ldi	r25, 0x28	; 40
 b70:	9a 95       	dec	r25
 b72:	f1 f7       	brne	.-4      	; 0xb70 <mirf_transmit_data+0x58>
			_delay_us(15);
			mirf_CE_lo;
 b74:	c2 98       	cbi	0x18, 2	; 24
 b76:	21 97       	sbiw	r28, 0x01	; 1
		}
		waitcount++;
		if (waitcount >= 10) { // If we haven't heard back in 5ms, exit
 b78:	41 f7       	brne	.-48     	; 0xb4a <mirf_transmit_data+0x32>
			mirf_config_register(STATUS, 1<<MAX_RT); // Reset maximum retries to be able to transmit again next time
 b7a:	60 e1       	ldi	r22, 0x10	; 16
 b7c:	87 e0       	ldi	r24, 0x07	; 7
 b7e:	6c df       	rcall	.-296    	; 0xa58 <mirf_config_register>
			return 0;
 b80:	04 c0       	rjmp	.+8      	; 0xb8a <mirf_transmit_data+0x72>
		}
	}
	
	mirf_config_register(STATUS,(1<<TX_DS)); // Reset status register
 b82:	60 e2       	ldi	r22, 0x20	; 32
 b84:	87 e0       	ldi	r24, 0x07	; 7
 b86:	68 df       	rcall	.-304    	; 0xa58 <mirf_config_register>
	
	return 1;
 b88:	11 e0       	ldi	r17, 0x01	; 1
}
 b8a:	81 2f       	mov	r24, r17
 b8c:	df 91       	pop	r29
 b8e:	cf 91       	pop	r28
 b90:	1f 91       	pop	r17
 b92:	08 95       	ret

00000b94 <mirf_receive_data>:

// Receive data
uint8_t mirf_receive_data(void) {
 b94:	cf 93       	push	r28
	RX_POWERUP; // Power up to receiver mode
 b96:	6b e0       	ldi	r22, 0x0B	; 11
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	5e df       	rcall	.-324    	; 0xa58 <mirf_config_register>
	mirf_CE_hi; // Start listening
 b9c:	c2 9a       	sbi	0x18, 2	; 24
 b9e:	e0 ea       	ldi	r30, 0xA0	; 160
 ba0:	f0 e0       	ldi	r31, 0x00	; 0

	for (int x = 0; x < mirf_PAYLOAD; x++) {
		data_in.as_data.data[x] = 0; // Clear the data_in
 ba2:	11 92       	st	Z+, r1
// Receive data
uint8_t mirf_receive_data(void) {
	RX_POWERUP; // Power up to receiver mode
	mirf_CE_hi; // Start listening

	for (int x = 0; x < mirf_PAYLOAD; x++) {
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	e4 3b       	cpi	r30, 0xB4	; 180
 ba8:	f8 07       	cpc	r31, r24
 baa:	d9 f7       	brne	.-10     	; 0xba2 <mirf_receive_data+0xe>
 bac:	c4 e6       	ldi	r28, 0x64	; 100
		data_in.as_data.data[x] = 0; // Clear the data_in
	}

	uint8_t waitcount = 0;
	while (!(mirf_status() & (1<<RX_DR))) { // Wait until data is ready to be read
 bae:	4d df       	rcall	.-358    	; 0xa4a <mirf_status>
 bb0:	86 fd       	sbrc	r24, 6
 bb2:	0a c0       	rjmp	.+20     	; 0xbc8 <mirf_receive_data+0x34>
 bb4:	87 ee       	ldi	r24, 0xE7	; 231
 bb6:	93 e0       	ldi	r25, 0x03	; 3
 bb8:	01 97       	sbiw	r24, 0x01	; 1
 bba:	f1 f7       	brne	.-4      	; 0xbb8 <mirf_receive_data+0x24>
 bbc:	00 c0       	rjmp	.+0      	; 0xbbe <mirf_receive_data+0x2a>
 bbe:	00 00       	nop
 bc0:	c1 50       	subi	r28, 0x01	; 1
		_delay_us(500);
		waitcount++;
		if (waitcount >= 100) { // If we haven't heard back in 50ms, exit
 bc2:	a9 f7       	brne	.-22     	; 0xbae <mirf_receive_data+0x1a>
			mirf_CE_lo; // Stop listening
 bc4:	c2 98       	cbi	0x18, 2	; 24
			return 0;
 bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <mirf_receive_data+0x4e>
		}
	}
	mirf_CE_lo; // Stop listening
 bc8:	c2 98       	cbi	0x18, 2	; 24

	mirf_CSN_lo; // Pull down chip select
 bca:	df 98       	cbi	0x1b, 7	; 27
	spi_transfer(R_RX_PAYLOAD); // Send cmd to read rx payload
 bcc:	81 e6       	ldi	r24, 0x61	; 97
 bce:	0c d0       	rcall	.+24     	; 0xbe8 <spi_transfer>
	spi_read_data(data_in.as_data.data, mirf_PAYLOAD); // Read payload
 bd0:	64 e1       	ldi	r22, 0x14	; 20
 bd2:	80 ea       	ldi	r24, 0xA0	; 160
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	2e d0       	rcall	.+92     	; 0xc34 <spi_read_data>
	mirf_CSN_hi; // Pull up chip select
 bd8:	df 9a       	sbi	0x1b, 7	; 27
	mirf_config_register(STATUS,(1<<RX_DR)); // Reset status register
 bda:	60 e4       	ldi	r22, 0x40	; 64
 bdc:	87 e0       	ldi	r24, 0x07	; 7
 bde:	3c df       	rcall	.-392    	; 0xa58 <mirf_config_register>
	return 1;
 be0:	c1 e0       	ldi	r28, 0x01	; 1
}
 be2:	8c 2f       	mov	r24, r28
 be4:	cf 91       	pop	r28
 be6:	08 95       	ret

00000be8 <spi_transfer>:
#define NULL ((void *)0)
#endif

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	USIDR = data;
 be8:	8f b9       	out	0x0f, r24	; 15
	USISR = _BV(USIOIF); // clear flag
 bea:	80 e4       	ldi	r24, 0x40	; 64
 bec:	8e b9       	out	0x0e, r24	; 14

	while ( (USISR & _BV(USIOIF)) == 0 ) {
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
 bee:	8b e1       	ldi	r24, 0x1B	; 27
// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	USIDR = data;
	USISR = _BV(USIOIF); // clear flag

	while ( (USISR & _BV(USIOIF)) == 0 ) {
 bf0:	76 99       	sbic	0x0e, 6	; 14
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <spi_transfer+0x10>
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
 bf4:	8d b9       	out	0x0d, r24	; 13
 bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <spi_transfer+0x8>
	}
	return USIDR;
 bf8:	8f b1       	in	r24, 0x0f	; 15
}
 bfa:	08 95       	ret

00000bfc <spi_write_data>:

// Write data using SPI
void spi_write_data(uint8_t * dataout, uint8_t len) {
 bfc:	ef 92       	push	r14
 bfe:	ff 92       	push	r15
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	df 93       	push	r29
 c06:	1f 92       	push	r1
 c08:	cd b7       	in	r28, 0x3d	; 61
 c0a:	de b7       	in	r29, 0x3e	; 62
 c0c:	18 2f       	mov	r17, r24
	uint8_t i;
	for (i = 0; i < len; i++) {
 c0e:	7c 01       	movw	r14, r24
 c10:	8e 2d       	mov	r24, r14
 c12:	81 1b       	sub	r24, r17
 c14:	86 17       	cp	r24, r22
 c16:	38 f4       	brcc	.+14     	; 0xc26 <spi_write_data+0x2a>
		spi_transfer(dataout[i]);
 c18:	f7 01       	movw	r30, r14
 c1a:	81 91       	ld	r24, Z+
 c1c:	7f 01       	movw	r14, r30
 c1e:	69 83       	std	Y+1, r22	; 0x01
 c20:	e3 df       	rcall	.-58     	; 0xbe8 <spi_transfer>
 c22:	69 81       	ldd	r22, Y+1	; 0x01
 c24:	f5 cf       	rjmp	.-22     	; 0xc10 <spi_write_data+0x14>
	}
}
 c26:	0f 90       	pop	r0
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	1f 91       	pop	r17
 c2e:	ff 90       	pop	r15
 c30:	ef 90       	pop	r14
 c32:	08 95       	ret

00000c34 <spi_read_data>:

// Read data using SPI
void spi_read_data(uint8_t * datain, uint8_t len) {
 c34:	ef 92       	push	r14
 c36:	ff 92       	push	r15
 c38:	1f 93       	push	r17
 c3a:	cf 93       	push	r28
 c3c:	df 93       	push	r29
 c3e:	1f 92       	push	r1
 c40:	cd b7       	in	r28, 0x3d	; 61
 c42:	de b7       	in	r29, 0x3e	; 62
 c44:	18 2f       	mov	r17, r24
	uint8_t i;
	for (i = 0; i < len; i++) {
 c46:	7c 01       	movw	r14, r24
 c48:	8e 2d       	mov	r24, r14
 c4a:	81 1b       	sub	r24, r17
 c4c:	86 17       	cp	r24, r22
 c4e:	40 f4       	brcc	.+16     	; 0xc60 <spi_read_data+0x2c>
		datain[i] = spi_transfer(0x00);
 c50:	80 e0       	ldi	r24, 0x00	; 0
 c52:	69 83       	std	Y+1, r22	; 0x01
 c54:	c9 df       	rcall	.-110    	; 0xbe8 <spi_transfer>
 c56:	f7 01       	movw	r30, r14
 c58:	81 93       	st	Z+, r24
 c5a:	7f 01       	movw	r14, r30
 c5c:	69 81       	ldd	r22, Y+1	; 0x01
 c5e:	f4 cf       	rjmp	.-24     	; 0xc48 <spi_read_data+0x14>
	}
}
 c60:	0f 90       	pop	r0
 c62:	df 91       	pop	r29
 c64:	cf 91       	pop	r28
 c66:	1f 91       	pop	r17
 c68:	ff 90       	pop	r15
 c6a:	ef 90       	pop	r14
 c6c:	08 95       	ret

00000c6e <spi_init>:

// Initialise the SPI
void spi_init(void) {
	DDRA |= (1<<PA4); // SPI CLK
 c6e:	d4 9a       	sbi	0x1a, 4	; 26
	DDRA |= (1<<PA5); // SPI DO
 c70:	d5 9a       	sbi	0x1a, 5	; 26
	DDRA &= ~(1<<PA6); // SPI DI
 c72:	d6 98       	cbi	0x1a, 6	; 26
	PORTA |= (1<<PA6); // SPI DI
 c74:	de 9a       	sbi	0x1b, 6	; 27
 c76:	08 95       	ret

00000c78 <__vector_9>:
 c78:	1f 92       	push	r1
 c7a:	0f 92       	push	r0
 c7c:	0f b6       	in	r0, 0x3f	; 63
 c7e:	0f 92       	push	r0
 c80:	11 24       	eor	r1, r1
 c82:	2f 93       	push	r18
 c84:	3f 93       	push	r19
 c86:	4f 93       	push	r20
 c88:	5f 93       	push	r21
 c8a:	6f 93       	push	r22
 c8c:	7f 93       	push	r23
 c8e:	8f 93       	push	r24
 c90:	9f 93       	push	r25
 c92:	af 93       	push	r26
 c94:	80 91 94 00 	lds	r24, 0x0094
 c98:	88 23       	and	r24, r24
 c9a:	19 f1       	breq	.+70     	; 0xce2 <__vector_9+0x6a>
 c9c:	80 91 db 00 	lds	r24, 0x00DB
 ca0:	81 11       	cpse	r24, r1
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <__vector_9+0x30>
 ca4:	c0 98       	cbi	0x18, 0	; 24
 ca6:	18 c0       	rjmp	.+48     	; 0xcd8 <__vector_9+0x60>
 ca8:	80 91 db 00 	lds	r24, 0x00DB
 cac:	89 30       	cpi	r24, 0x09	; 9
 cae:	68 f4       	brcc	.+26     	; 0xcca <__vector_9+0x52>
 cb0:	80 91 dc 00 	lds	r24, 0x00DC
 cb4:	80 ff       	sbrs	r24, 0
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <__vector_9+0x44>
 cb8:	c0 9a       	sbi	0x18, 0	; 24
 cba:	01 c0       	rjmp	.+2      	; 0xcbe <__vector_9+0x46>
 cbc:	c0 98       	cbi	0x18, 0	; 24
 cbe:	80 91 dc 00 	lds	r24, 0x00DC
 cc2:	86 95       	lsr	r24
 cc4:	80 93 dc 00 	sts	0x00DC, r24
 cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <__vector_9+0x60>
 cca:	80 91 db 00 	lds	r24, 0x00DB
 cce:	89 30       	cpi	r24, 0x09	; 9
 cd0:	18 f0       	brcs	.+6      	; 0xcd8 <__vector_9+0x60>
 cd2:	c0 9a       	sbi	0x18, 0	; 24
 cd4:	10 92 94 00 	sts	0x0094, r1
 cd8:	80 91 db 00 	lds	r24, 0x00DB
 cdc:	8f 5f       	subi	r24, 0xFF	; 255
 cde:	80 93 db 00 	sts	0x00DB, r24
 ce2:	80 91 95 00 	lds	r24, 0x0095
 ce6:	90 91 96 00 	lds	r25, 0x0096
 cea:	89 59       	subi	r24, 0x99	; 153
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	90 93 96 00 	sts	0x0096, r25
 cf2:	80 93 95 00 	sts	0x0095, r24
 cf6:	80 91 95 00 	lds	r24, 0x0095
 cfa:	90 91 96 00 	lds	r25, 0x0096
 cfe:	89 3e       	cpi	r24, 0xE9	; 233
 d00:	93 40       	sbci	r25, 0x03	; 3
 d02:	48 f1       	brcs	.+82     	; 0xd56 <__vector_9+0xde>
 d04:	20 91 97 00 	lds	r18, 0x0097
 d08:	30 91 98 00 	lds	r19, 0x0098
 d0c:	40 91 99 00 	lds	r20, 0x0099
 d10:	50 91 9a 00 	lds	r21, 0x009A
 d14:	60 91 9b 00 	lds	r22, 0x009B
 d18:	70 91 9c 00 	lds	r23, 0x009C
 d1c:	80 91 9d 00 	lds	r24, 0x009D
 d20:	90 91 9e 00 	lds	r25, 0x009E
 d24:	a1 e0       	ldi	r26, 0x01	; 1
 d26:	55 d0       	rcall	.+170    	; 0xdd2 <__adddi3_s8>
 d28:	20 93 97 00 	sts	0x0097, r18
 d2c:	30 93 98 00 	sts	0x0098, r19
 d30:	40 93 99 00 	sts	0x0099, r20
 d34:	50 93 9a 00 	sts	0x009A, r21
 d38:	60 93 9b 00 	sts	0x009B, r22
 d3c:	70 93 9c 00 	sts	0x009C, r23
 d40:	80 93 9d 00 	sts	0x009D, r24
 d44:	90 93 9e 00 	sts	0x009E, r25
 d48:	80 91 95 00 	lds	r24, 0x0095
 d4c:	90 91 96 00 	lds	r25, 0x0096
 d50:	88 5e       	subi	r24, 0xE8	; 232
 d52:	93 40       	sbci	r25, 0x03	; 3
 d54:	cc cf       	rjmp	.-104    	; 0xcee <__vector_9+0x76>
 d56:	af 91       	pop	r26
 d58:	9f 91       	pop	r25
 d5a:	8f 91       	pop	r24
 d5c:	7f 91       	pop	r23
 d5e:	6f 91       	pop	r22
 d60:	5f 91       	pop	r21
 d62:	4f 91       	pop	r20
 d64:	3f 91       	pop	r19
 d66:	2f 91       	pop	r18
 d68:	0f 90       	pop	r0
 d6a:	0f be       	out	0x3f, r0	; 63
 d6c:	0f 90       	pop	r0
 d6e:	1f 90       	pop	r1
 d70:	18 95       	reti

00000d72 <__udivmodhi4>:
 d72:	aa 1b       	sub	r26, r26
 d74:	bb 1b       	sub	r27, r27
 d76:	51 e1       	ldi	r21, 0x11	; 17
 d78:	07 c0       	rjmp	.+14     	; 0xd88 <__udivmodhi4_ep>

00000d7a <__udivmodhi4_loop>:
 d7a:	aa 1f       	adc	r26, r26
 d7c:	bb 1f       	adc	r27, r27
 d7e:	a6 17       	cp	r26, r22
 d80:	b7 07       	cpc	r27, r23
 d82:	10 f0       	brcs	.+4      	; 0xd88 <__udivmodhi4_ep>
 d84:	a6 1b       	sub	r26, r22
 d86:	b7 0b       	sbc	r27, r23

00000d88 <__udivmodhi4_ep>:
 d88:	88 1f       	adc	r24, r24
 d8a:	99 1f       	adc	r25, r25
 d8c:	5a 95       	dec	r21
 d8e:	a9 f7       	brne	.-22     	; 0xd7a <__udivmodhi4_loop>
 d90:	80 95       	com	r24
 d92:	90 95       	com	r25
 d94:	bc 01       	movw	r22, r24
 d96:	cd 01       	movw	r24, r26
 d98:	08 95       	ret

00000d9a <__divmodsi4>:
 d9a:	05 2e       	mov	r0, r21
 d9c:	97 fb       	bst	r25, 7
 d9e:	16 f4       	brtc	.+4      	; 0xda4 <__divmodsi4+0xa>
 da0:	00 94       	com	r0
 da2:	0f d0       	rcall	.+30     	; 0xdc2 <__negsi2>
 da4:	57 fd       	sbrc	r21, 7
 da6:	05 d0       	rcall	.+10     	; 0xdb2 <__divmodsi4_neg2>
 da8:	20 d0       	rcall	.+64     	; 0xdea <__udivmodsi4>
 daa:	07 fc       	sbrc	r0, 7
 dac:	02 d0       	rcall	.+4      	; 0xdb2 <__divmodsi4_neg2>
 dae:	46 f4       	brtc	.+16     	; 0xdc0 <__divmodsi4_exit>
 db0:	08 c0       	rjmp	.+16     	; 0xdc2 <__negsi2>

00000db2 <__divmodsi4_neg2>:
 db2:	50 95       	com	r21
 db4:	40 95       	com	r20
 db6:	30 95       	com	r19
 db8:	21 95       	neg	r18
 dba:	3f 4f       	sbci	r19, 0xFF	; 255
 dbc:	4f 4f       	sbci	r20, 0xFF	; 255
 dbe:	5f 4f       	sbci	r21, 0xFF	; 255

00000dc0 <__divmodsi4_exit>:
 dc0:	08 95       	ret

00000dc2 <__negsi2>:
 dc2:	90 95       	com	r25
 dc4:	80 95       	com	r24
 dc6:	70 95       	com	r23
 dc8:	61 95       	neg	r22
 dca:	7f 4f       	sbci	r23, 0xFF	; 255
 dcc:	8f 4f       	sbci	r24, 0xFF	; 255
 dce:	9f 4f       	sbci	r25, 0xFF	; 255
 dd0:	08 95       	ret

00000dd2 <__adddi3_s8>:
 dd2:	00 24       	eor	r0, r0
 dd4:	a7 fd       	sbrc	r26, 7
 dd6:	00 94       	com	r0
 dd8:	2a 0f       	add	r18, r26
 dda:	30 1d       	adc	r19, r0
 ddc:	40 1d       	adc	r20, r0
 dde:	50 1d       	adc	r21, r0
 de0:	60 1d       	adc	r22, r0
 de2:	70 1d       	adc	r23, r0
 de4:	80 1d       	adc	r24, r0
 de6:	90 1d       	adc	r25, r0
 de8:	08 95       	ret

00000dea <__udivmodsi4>:
 dea:	a1 e2       	ldi	r26, 0x21	; 33
 dec:	1a 2e       	mov	r1, r26
 dee:	aa 1b       	sub	r26, r26
 df0:	bb 1b       	sub	r27, r27
 df2:	fd 01       	movw	r30, r26
 df4:	0d c0       	rjmp	.+26     	; 0xe10 <__udivmodsi4_ep>

00000df6 <__udivmodsi4_loop>:
 df6:	aa 1f       	adc	r26, r26
 df8:	bb 1f       	adc	r27, r27
 dfa:	ee 1f       	adc	r30, r30
 dfc:	ff 1f       	adc	r31, r31
 dfe:	a2 17       	cp	r26, r18
 e00:	b3 07       	cpc	r27, r19
 e02:	e4 07       	cpc	r30, r20
 e04:	f5 07       	cpc	r31, r21
 e06:	20 f0       	brcs	.+8      	; 0xe10 <__udivmodsi4_ep>
 e08:	a2 1b       	sub	r26, r18
 e0a:	b3 0b       	sbc	r27, r19
 e0c:	e4 0b       	sbc	r30, r20
 e0e:	f5 0b       	sbc	r31, r21

00000e10 <__udivmodsi4_ep>:
 e10:	66 1f       	adc	r22, r22
 e12:	77 1f       	adc	r23, r23
 e14:	88 1f       	adc	r24, r24
 e16:	99 1f       	adc	r25, r25
 e18:	1a 94       	dec	r1
 e1a:	69 f7       	brne	.-38     	; 0xdf6 <__udivmodsi4_loop>
 e1c:	60 95       	com	r22
 e1e:	70 95       	com	r23
 e20:	80 95       	com	r24
 e22:	90 95       	com	r25
 e24:	9b 01       	movw	r18, r22
 e26:	ac 01       	movw	r20, r24
 e28:	bd 01       	movw	r22, r26
 e2a:	cf 01       	movw	r24, r30
 e2c:	08 95       	ret

00000e2e <memcpy_P>:
 e2e:	fb 01       	movw	r30, r22
 e30:	dc 01       	movw	r26, r24
 e32:	02 c0       	rjmp	.+4      	; 0xe38 <memcpy_P+0xa>
 e34:	05 90       	lpm	r0, Z+
 e36:	0d 92       	st	X+, r0
 e38:	41 50       	subi	r20, 0x01	; 1
 e3a:	50 40       	sbci	r21, 0x00	; 0
 e3c:	d8 f7       	brcc	.-10     	; 0xe34 <memcpy_P+0x6>
 e3e:	08 95       	ret

00000e40 <_exit>:
 e40:	f8 94       	cli

00000e42 <__stop_program>:
 e42:	ff cf       	rjmp	.-2      	; 0xe42 <__stop_program>

Disassembly of section .bootloader:

00000e44 <boot_program_page>:
 e44:	0f 93       	push	r16
 e46:	1f 93       	push	r17
 e48:	cf 93       	push	r28
 e4a:	8b 01       	movw	r16, r22
 e4c:	7f b7       	in	r23, 0x3f	; 63
 e4e:	f8 94       	cli
 e50:	e1 99       	sbic	0x1c, 1	; 28
 e52:	fe cf       	rjmp	.-4      	; 0xe50 <boot_program_page+0xc>
 e54:	23 e0       	ldi	r18, 0x03	; 3
 e56:	fc 01       	movw	r30, r24
 e58:	20 93 57 00 	sts	0x0057, r18
 e5c:	e8 95       	spm
 e5e:	07 b6       	in	r0, 0x37	; 55
 e60:	00 fc       	sbrc	r0, 0
 e62:	fd cf       	rjmp	.-6      	; 0xe5e <boot_program_page+0x1a>
 e64:	20 e0       	ldi	r18, 0x00	; 0
 e66:	30 e0       	ldi	r19, 0x00	; 0
 e68:	c1 e0       	ldi	r28, 0x01	; 1
 e6a:	d8 01       	movw	r26, r16
 e6c:	a2 0f       	add	r26, r18
 e6e:	b3 1f       	adc	r27, r19
 e70:	6c 91       	ld	r22, X
 e72:	f9 01       	movw	r30, r18
 e74:	e8 0f       	add	r30, r24
 e76:	f9 1f       	adc	r31, r25
 e78:	11 96       	adiw	r26, 0x01	; 1
 e7a:	4c 91       	ld	r20, X
 e7c:	50 e0       	ldi	r21, 0x00	; 0
 e7e:	54 2f       	mov	r21, r20
 e80:	44 27       	eor	r20, r20
 e82:	46 0f       	add	r20, r22
 e84:	51 1d       	adc	r21, r1
 e86:	0a 01       	movw	r0, r20
 e88:	c0 93 57 00 	sts	0x0057, r28
 e8c:	e8 95       	spm
 e8e:	11 24       	eor	r1, r1
 e90:	2e 5f       	subi	r18, 0xFE	; 254
 e92:	3f 4f       	sbci	r19, 0xFF	; 255
 e94:	20 32       	cpi	r18, 0x20	; 32
 e96:	31 05       	cpc	r19, r1
 e98:	41 f7       	brne	.-48     	; 0xe6a <boot_program_page+0x26>
 e9a:	41 e0       	ldi	r20, 0x01	; 1
 e9c:	af ef       	ldi	r26, 0xFF	; 255
 e9e:	bf ef       	ldi	r27, 0xFF	; 255
 ea0:	f9 01       	movw	r30, r18
 ea2:	e8 0f       	add	r30, r24
 ea4:	f9 1f       	adc	r31, r25
 ea6:	0d 01       	movw	r0, r26
 ea8:	40 93 57 00 	sts	0x0057, r20
 eac:	e8 95       	spm
 eae:	11 24       	eor	r1, r1
 eb0:	2e 5f       	subi	r18, 0xFE	; 254
 eb2:	3f 4f       	sbci	r19, 0xFF	; 255
 eb4:	20 34       	cpi	r18, 0x40	; 64
 eb6:	31 05       	cpc	r19, r1
 eb8:	99 f7       	brne	.-26     	; 0xea0 <boot_program_page+0x5c>
 eba:	e1 99       	sbic	0x1c, 1	; 28
 ebc:	fe cf       	rjmp	.-4      	; 0xeba <boot_program_page+0x76>
 ebe:	07 b6       	in	r0, 0x37	; 55
 ec0:	00 fc       	sbrc	r0, 0
 ec2:	fd cf       	rjmp	.-6      	; 0xebe <boot_program_page+0x7a>
 ec4:	25 e0       	ldi	r18, 0x05	; 5
 ec6:	fc 01       	movw	r30, r24
 ec8:	20 93 57 00 	sts	0x0057, r18
 ecc:	e8 95       	spm
 ece:	81 e1       	ldi	r24, 0x11	; 17
 ed0:	87 bf       	out	0x37, r24	; 55
 ed2:	e8 95       	spm
 ed4:	7f bf       	out	0x3f, r23	; 63
 ed6:	cf 91       	pop	r28
 ed8:	1f 91       	pop	r17
 eda:	0f 91       	pop	r16
 edc:	08 95       	ret
